{
  "widget-schemas": {
    "sympy-core-add": {
      "id": "sympy-core-add",
      "name": "SymPy Add",
      "description": "Expression representing addition operation for algebraic group.\n\n.. deprecated:: 1.7\n\n   Using arguments that aren't subclasses of :class:`~.Expr` in core\n   operators (:class:`~.Mul`, :class:`~.Add`,...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Add",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Add operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_add.py",
      "module_name": "sympy.core",
      "class_name": "Add"
    },
    "sympy-core-add-adjoint": {
      "id": "sympy-core-add-adjoint",
      "name": "SymPy Add.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Add.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_add_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Add",
      "method_name": "adjoint"
    },
    "sympy-core-add-apart": {
      "id": "sympy-core-add-apart",
      "name": "SymPy Add.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Add.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_add_apart.py",
      "module_name": "sympy.core",
      "class_name": "Add",
      "method_name": "apart"
    },
    "sympy-core-add-args_cnc": {
      "id": "sympy-core-add-args_cnc",
      "name": "SymPy Add.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Add.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_add_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Add",
      "method_name": "args_cnc"
    },
    "sympy-core-add-as_base_exp": {
      "id": "sympy-core-add-as_base_exp",
      "name": "SymPy Add.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Add.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_add_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Add",
      "method_name": "as_base_exp"
    },
    "sympy-core-add-as_coeff_Add": {
      "id": "sympy-core-add-as_coeff_Add",
      "name": "SymPy Add.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          },
          "deps": {
            "type": "string",
            "description": "Parameter deps for as_coeff_Add",
            "default": "None"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Add.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_add_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Add",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-algebraicnumber": {
      "id": "sympy-core-algebraicnumber",
      "name": "SymPy AlgebraicNumber",
      "description": "Class for representing algebraic numbers in SymPy.\n\nSymbolically, an instance of this class represents an element\n$\\alpha \\in \\mathbb{Q}(\\theta) \\hookrightarrow \\mathbb{C}$. That is, the\nalgebraic num...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for AlgebraicNumber",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AlgebraicNumber operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_algebraicnumber.py",
      "module_name": "sympy.core",
      "class_name": "AlgebraicNumber"
    },
    "sympy-core-algebraicnumber-adjoint": {
      "id": "sympy-core-algebraicnumber-adjoint",
      "name": "SymPy AlgebraicNumber.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AlgebraicNumber.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_algebraicnumber_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "AlgebraicNumber",
      "method_name": "adjoint"
    },
    "sympy-core-algebraicnumber-apart": {
      "id": "sympy-core-algebraicnumber-apart",
      "name": "SymPy AlgebraicNumber.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AlgebraicNumber.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_algebraicnumber_apart.py",
      "module_name": "sympy.core",
      "class_name": "AlgebraicNumber",
      "method_name": "apart"
    },
    "sympy-core-algebraicnumber-args_cnc": {
      "id": "sympy-core-algebraicnumber-args_cnc",
      "name": "SymPy AlgebraicNumber.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AlgebraicNumber.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_algebraicnumber_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "AlgebraicNumber",
      "method_name": "args_cnc"
    },
    "sympy-core-algebraicnumber-as_base_exp": {
      "id": "sympy-core-algebraicnumber-as_base_exp",
      "name": "SymPy AlgebraicNumber.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AlgebraicNumber.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_algebraicnumber_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "AlgebraicNumber",
      "method_name": "as_base_exp"
    },
    "sympy-core-algebraicnumber-as_coeff_Add": {
      "id": "sympy-core-algebraicnumber-as_coeff_Add",
      "name": "SymPy AlgebraicNumber.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AlgebraicNumber.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_algebraicnumber_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "AlgebraicNumber",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-atom": {
      "id": "sympy-core-atom",
      "name": "SymPy Atom",
      "description": "A parent class for atomic things. An atom is an expression with no subexpressions.\n\nExamples\n========\n\nSymbol, Number, Rational, Integer, ...\nBut not: Add, Mul, Pow, ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Atom",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Atom operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atom.py",
      "module_name": "sympy.core",
      "class_name": "Atom"
    },
    "sympy-core-atom-as_content_primitive": {
      "id": "sympy-core-atom-as_content_primitive",
      "name": "SymPy Atom.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Atom.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atom_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Atom",
      "method_name": "as_content_primitive"
    },
    "sympy-core-atom-as_dummy": {
      "id": "sympy-core-atom-as_dummy",
      "name": "SymPy Atom.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Atom.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atom_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Atom",
      "method_name": "as_dummy"
    },
    "sympy-core-atom-atoms": {
      "id": "sympy-core-atom-atoms",
      "name": "SymPy Atom.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Atom.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atom_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Atom",
      "method_name": "atoms"
    },
    "sympy-core-atom-class_key": {
      "id": "sympy-core-atom-class_key",
      "name": "SymPy Atom.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Atom.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atom_class_key.py",
      "module_name": "sympy.core",
      "class_name": "Atom",
      "method_name": "class_key"
    },
    "sympy-core-atom-compare": {
      "id": "sympy-core-atom-compare",
      "name": "SymPy Atom.compare",
      "description": "Return -1, 0, 1 if the object is less than, equal,\nor greater than other in a canonical sense.\nNon-Basic are always greater than Basic.\nIf both names of the classes being compared appear\nin the `order...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "other": {
            "type": "string",
            "description": "Parameter other for compare"
          }
        },
        "required": [
          "other"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Atom.compare"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atom_compare.py",
      "module_name": "sympy.core",
      "class_name": "Atom",
      "method_name": "compare"
    },
    "sympy-core-atomicexpr": {
      "id": "sympy-core-atomicexpr",
      "name": "SymPy AtomicExpr",
      "description": "A parent class for object which are both atoms and Exprs.\n\nFor example: Symbol, Number, Rational, Integer, ...\nBut not: Add, Mul, Pow, ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for AtomicExpr",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AtomicExpr operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atomicexpr.py",
      "module_name": "sympy.core",
      "class_name": "AtomicExpr"
    },
    "sympy-core-atomicexpr-adjoint": {
      "id": "sympy-core-atomicexpr-adjoint",
      "name": "SymPy AtomicExpr.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AtomicExpr.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atomicexpr_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "AtomicExpr",
      "method_name": "adjoint"
    },
    "sympy-core-atomicexpr-apart": {
      "id": "sympy-core-atomicexpr-apart",
      "name": "SymPy AtomicExpr.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AtomicExpr.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atomicexpr_apart.py",
      "module_name": "sympy.core",
      "class_name": "AtomicExpr",
      "method_name": "apart"
    },
    "sympy-core-atomicexpr-args_cnc": {
      "id": "sympy-core-atomicexpr-args_cnc",
      "name": "SymPy AtomicExpr.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AtomicExpr.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atomicexpr_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "AtomicExpr",
      "method_name": "args_cnc"
    },
    "sympy-core-atomicexpr-as_base_exp": {
      "id": "sympy-core-atomicexpr-as_base_exp",
      "name": "SymPy AtomicExpr.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AtomicExpr.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atomicexpr_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "AtomicExpr",
      "method_name": "as_base_exp"
    },
    "sympy-core-atomicexpr-as_coeff_Add": {
      "id": "sympy-core-atomicexpr-as_coeff_Add",
      "name": "SymPy AtomicExpr.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AtomicExpr.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_atomicexpr_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "AtomicExpr",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-basic": {
      "id": "sympy-core-basic",
      "name": "SymPy Basic",
      "description": "Base class for all SymPy objects.\n\nNotes and conventions\n=====================\n\n1) Always use ``.args``, when accessing parameters of some instance:\n\n>>> from sympy import cot\n>>> from sympy.abc impor...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Basic",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Basic operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_basic.py",
      "module_name": "sympy.core",
      "class_name": "Basic"
    },
    "sympy-core-basic-as_content_primitive": {
      "id": "sympy-core-basic-as_content_primitive",
      "name": "SymPy Basic.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Basic.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_basic_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Basic",
      "method_name": "as_content_primitive"
    },
    "sympy-core-basic-as_dummy": {
      "id": "sympy-core-basic-as_dummy",
      "name": "SymPy Basic.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Basic.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_basic_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Basic",
      "method_name": "as_dummy"
    },
    "sympy-core-basic-atoms": {
      "id": "sympy-core-basic-atoms",
      "name": "SymPy Basic.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Basic.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_basic_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Basic",
      "method_name": "atoms"
    },
    "sympy-core-basic-class_key": {
      "id": "sympy-core-basic-class_key",
      "name": "SymPy Basic.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Basic.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_basic_class_key.py",
      "module_name": "sympy.core",
      "class_name": "Basic",
      "method_name": "class_key"
    },
    "sympy-core-basic-compare": {
      "id": "sympy-core-basic-compare",
      "name": "SymPy Basic.compare",
      "description": "Return -1, 0, 1 if the object is less than, equal,\nor greater than other in a canonical sense.\nNon-Basic are always greater than Basic.\nIf both names of the classes being compared appear\nin the `order...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "other": {
            "type": "string",
            "description": "Parameter other for compare"
          }
        },
        "required": [
          "other"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Basic.compare"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_basic_compare.py",
      "module_name": "sympy.core",
      "class_name": "Basic",
      "method_name": "compare"
    },
    "sympy-core-derivative": {
      "id": "sympy-core-derivative",
      "name": "SymPy Derivative",
      "description": "Carries out differentiation of the given expression with respect to symbols.\n\nExamples\n========\n\n>>> from sympy import Derivative, Function, symbols, Subs\n>>> from sympy.abc import x, y\n>>> f, g = sym...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Derivative",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Derivative operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_derivative.py",
      "module_name": "sympy.core",
      "class_name": "Derivative"
    },
    "sympy-core-derivative-adjoint": {
      "id": "sympy-core-derivative-adjoint",
      "name": "SymPy Derivative.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Derivative.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_derivative_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Derivative",
      "method_name": "adjoint"
    },
    "sympy-core-derivative-apart": {
      "id": "sympy-core-derivative-apart",
      "name": "SymPy Derivative.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Derivative.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_derivative_apart.py",
      "module_name": "sympy.core",
      "class_name": "Derivative",
      "method_name": "apart"
    },
    "sympy-core-derivative-args_cnc": {
      "id": "sympy-core-derivative-args_cnc",
      "name": "SymPy Derivative.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Derivative.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_derivative_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Derivative",
      "method_name": "args_cnc"
    },
    "sympy-core-derivative-as_base_exp": {
      "id": "sympy-core-derivative-as_base_exp",
      "name": "SymPy Derivative.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Derivative.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_derivative_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Derivative",
      "method_name": "as_base_exp"
    },
    "sympy-core-derivative-as_coeff_Add": {
      "id": "sympy-core-derivative-as_coeff_Add",
      "name": "SymPy Derivative.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Derivative.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_derivative_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Derivative",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-dict": {
      "id": "sympy-core-dict",
      "name": "SymPy Dict",
      "description": "Wrapper around the builtin dict object.\n\nExplanation\n===========\n\nThe Dict is a subclass of Basic, so that it works well in the\nSymPy framework.  Because it is immutable, it may be included\nin sets, b...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Dict",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dict operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dict.py",
      "module_name": "sympy.core",
      "class_name": "Dict"
    },
    "sympy-core-dict-as_content_primitive": {
      "id": "sympy-core-dict-as_content_primitive",
      "name": "SymPy Dict.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dict.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dict_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Dict",
      "method_name": "as_content_primitive"
    },
    "sympy-core-dict-as_dummy": {
      "id": "sympy-core-dict-as_dummy",
      "name": "SymPy Dict.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dict.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dict_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Dict",
      "method_name": "as_dummy"
    },
    "sympy-core-dict-atoms": {
      "id": "sympy-core-dict-atoms",
      "name": "SymPy Dict.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dict.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dict_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Dict",
      "method_name": "atoms"
    },
    "sympy-core-dict-class_key": {
      "id": "sympy-core-dict-class_key",
      "name": "SymPy Dict.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dict.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dict_class_key.py",
      "module_name": "sympy.core",
      "class_name": "Dict",
      "method_name": "class_key"
    },
    "sympy-core-dict-compare": {
      "id": "sympy-core-dict-compare",
      "name": "SymPy Dict.compare",
      "description": "Return -1, 0, 1 if the object is less than, equal,\nor greater than other in a canonical sense.\nNon-Basic are always greater than Basic.\nIf both names of the classes being compared appear\nin the `order...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "other": {
            "type": "string",
            "description": "Parameter other for compare"
          }
        },
        "required": [
          "other"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dict.compare"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dict_compare.py",
      "module_name": "sympy.core",
      "class_name": "Dict",
      "method_name": "compare"
    },
    "sympy-core-dummy": {
      "id": "sympy-core-dummy",
      "name": "SymPy Dummy",
      "description": "Dummy symbols are each unique, even if they have the same name:\n\nExamples\n========\n\n>>> from sympy import Dummy\n>>> Dummy(\"x\") == Dummy(\"x\")\nFalse\n\nIf a name is not supplied then a string value of an ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Dummy",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dummy operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Dummy"
    },
    "sympy-core-dummy-adjoint": {
      "id": "sympy-core-dummy-adjoint",
      "name": "SymPy Dummy.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dummy.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dummy_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Dummy",
      "method_name": "adjoint"
    },
    "sympy-core-dummy-apart": {
      "id": "sympy-core-dummy-apart",
      "name": "SymPy Dummy.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dummy.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dummy_apart.py",
      "module_name": "sympy.core",
      "class_name": "Dummy",
      "method_name": "apart"
    },
    "sympy-core-dummy-args_cnc": {
      "id": "sympy-core-dummy-args_cnc",
      "name": "SymPy Dummy.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dummy.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dummy_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Dummy",
      "method_name": "args_cnc"
    },
    "sympy-core-dummy-as_base_exp": {
      "id": "sympy-core-dummy-as_base_exp",
      "name": "SymPy Dummy.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dummy.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dummy_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Dummy",
      "method_name": "as_base_exp"
    },
    "sympy-core-dummy-as_coeff_Add": {
      "id": "sympy-core-dummy-as_coeff_Add",
      "name": "SymPy Dummy.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Dummy.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_dummy_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Dummy",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-eq": {
      "id": "sympy-core-eq",
      "name": "SymPy Eq",
      "description": "An equal relation between two objects.\n\nExplanation\n===========\n\nRepresents that two objects are equal.  If they can be easily shown\nto be definitively equal (or unequal), this will reduce to True (or...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Eq",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Eq operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_eq.py",
      "module_name": "sympy.core",
      "class_name": "Eq"
    },
    "sympy-core-eq-as_content_primitive": {
      "id": "sympy-core-eq-as_content_primitive",
      "name": "SymPy Eq.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Eq.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_eq_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Eq",
      "method_name": "as_content_primitive"
    },
    "sympy-core-eq-as_dummy": {
      "id": "sympy-core-eq-as_dummy",
      "name": "SymPy Eq.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Eq.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_eq_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Eq",
      "method_name": "as_dummy"
    },
    "sympy-core-eq-as_poly": {
      "id": "sympy-core-eq-as_poly",
      "name": "SymPy Eq.as_poly",
      "description": "Returns lhs-rhs as a Poly\n\nExamples\n========\n\n>>> from sympy import Eq\n>>> from sympy.abc import x\n>>> Eq(x**2, 1).as_poly(x)\nPoly(x**2 - 1, x, domain='ZZ')",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "gens": {
            "type": "string",
            "description": "Parameter gens for as_poly"
          },
          "kwargs": {
            "type": "string",
            "description": "Parameter kwargs for as_poly"
          }
        },
        "required": [
          "kwargs"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Eq.as_poly"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_eq_as_poly.py",
      "module_name": "sympy.core",
      "class_name": "Eq",
      "method_name": "as_poly"
    },
    "sympy-core-eq-as_set": {
      "id": "sympy-core-eq-as_set",
      "name": "SymPy Eq.as_set",
      "description": "Rewrites Boolean expression in terms of real sets.\n\nExamples\n========\n\n>>> from sympy import Symbol, Eq, Or, And\n>>> x = Symbol('x', real=True)\n>>> Eq(x, 0).as_set()\n{0}\n>>> (x > 0).as_set()\nInterval....",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Eq.as_set"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_eq_as_set.py",
      "module_name": "sympy.core",
      "class_name": "Eq",
      "method_name": "as_set"
    },
    "sympy-core-eq-atoms": {
      "id": "sympy-core-eq-atoms",
      "name": "SymPy Eq.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Eq.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_eq_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Eq",
      "method_name": "atoms"
    },
    "sympy-core-equality": {
      "id": "sympy-core-equality",
      "name": "SymPy Equality",
      "description": "An equal relation between two objects.\n\nExplanation\n===========\n\nRepresents that two objects are equal.  If they can be easily shown\nto be definitively equal (or unequal), this will reduce to True (or...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Equality",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Equality operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_equality.py",
      "module_name": "sympy.core",
      "class_name": "Equality"
    },
    "sympy-core-equality-as_content_primitive": {
      "id": "sympy-core-equality-as_content_primitive",
      "name": "SymPy Equality.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Equality.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_equality_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Equality",
      "method_name": "as_content_primitive"
    },
    "sympy-core-equality-as_dummy": {
      "id": "sympy-core-equality-as_dummy",
      "name": "SymPy Equality.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Equality.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_equality_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Equality",
      "method_name": "as_dummy"
    },
    "sympy-core-equality-as_poly": {
      "id": "sympy-core-equality-as_poly",
      "name": "SymPy Equality.as_poly",
      "description": "Returns lhs-rhs as a Poly\n\nExamples\n========\n\n>>> from sympy import Eq\n>>> from sympy.abc import x\n>>> Eq(x**2, 1).as_poly(x)\nPoly(x**2 - 1, x, domain='ZZ')",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "gens": {
            "type": "string",
            "description": "Parameter gens for as_poly"
          },
          "kwargs": {
            "type": "string",
            "description": "Parameter kwargs for as_poly"
          }
        },
        "required": [
          "kwargs"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Equality.as_poly"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_equality_as_poly.py",
      "module_name": "sympy.core",
      "class_name": "Equality",
      "method_name": "as_poly"
    },
    "sympy-core-equality-as_set": {
      "id": "sympy-core-equality-as_set",
      "name": "SymPy Equality.as_set",
      "description": "Rewrites Boolean expression in terms of real sets.\n\nExamples\n========\n\n>>> from sympy import Symbol, Eq, Or, And\n>>> x = Symbol('x', real=True)\n>>> Eq(x, 0).as_set()\n{0}\n>>> (x > 0).as_set()\nInterval....",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Equality.as_set"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_equality_as_set.py",
      "module_name": "sympy.core",
      "class_name": "Equality",
      "method_name": "as_set"
    },
    "sympy-core-equality-atoms": {
      "id": "sympy-core-equality-atoms",
      "name": "SymPy Equality.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Equality.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_equality_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Equality",
      "method_name": "atoms"
    },
    "sympy-core-expr": {
      "id": "sympy-core-expr",
      "name": "SymPy Expr",
      "description": "Base class for algebraic expressions.\n\nExplanation\n===========\n\nEverything that requires arithmetic operations to be defined\nshould subclass this class, instead of Basic (which should be\nused only for...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Expr",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Expr operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_expr.py",
      "module_name": "sympy.core",
      "class_name": "Expr"
    },
    "sympy-core-expr-adjoint": {
      "id": "sympy-core-expr-adjoint",
      "name": "SymPy Expr.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Expr.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_expr_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Expr",
      "method_name": "adjoint"
    },
    "sympy-core-expr-apart": {
      "id": "sympy-core-expr-apart",
      "name": "SymPy Expr.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Expr.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_expr_apart.py",
      "module_name": "sympy.core",
      "class_name": "Expr",
      "method_name": "apart"
    },
    "sympy-core-expr-args_cnc": {
      "id": "sympy-core-expr-args_cnc",
      "name": "SymPy Expr.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Expr.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_expr_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Expr",
      "method_name": "args_cnc"
    },
    "sympy-core-expr-as_base_exp": {
      "id": "sympy-core-expr-as_base_exp",
      "name": "SymPy Expr.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Expr.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_expr_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Expr",
      "method_name": "as_base_exp"
    },
    "sympy-core-expr-as_coeff_Add": {
      "id": "sympy-core-expr-as_coeff_Add",
      "name": "SymPy Expr.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Expr.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_expr_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Expr",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-float": {
      "id": "sympy-core-float",
      "name": "SymPy Float",
      "description": "Represent a floating-point number of arbitrary precision.\n\nExamples\n========\n\n>>> from sympy import Float\n>>> Float(3.5)\n3.50000000000000\n>>> Float(3)\n3.00000000000000\n\nCreating Floats from strings (a...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Float",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Float operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_float.py",
      "module_name": "sympy.core",
      "class_name": "Float"
    },
    "sympy-core-float-adjoint": {
      "id": "sympy-core-float-adjoint",
      "name": "SymPy Float.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Float.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_float_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Float",
      "method_name": "adjoint"
    },
    "sympy-core-float-apart": {
      "id": "sympy-core-float-apart",
      "name": "SymPy Float.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Float.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_float_apart.py",
      "module_name": "sympy.core",
      "class_name": "Float",
      "method_name": "apart"
    },
    "sympy-core-float-args_cnc": {
      "id": "sympy-core-float-args_cnc",
      "name": "SymPy Float.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Float.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_float_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Float",
      "method_name": "args_cnc"
    },
    "sympy-core-float-as_base_exp": {
      "id": "sympy-core-float-as_base_exp",
      "name": "SymPy Float.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Float.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_float_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Float",
      "method_name": "as_base_exp"
    },
    "sympy-core-float-as_coeff_Add": {
      "id": "sympy-core-float-as_coeff_Add",
      "name": "SymPy Float.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Float.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_float_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Float",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-function": {
      "id": "sympy-core-function",
      "name": "SymPy Function",
      "description": "Base class for applied mathematical functions.\n\nIt also serves as a constructor for undefined function classes.\n\nSee the :ref:`custom-functions` guide for details on how to subclass\n``Function`` and w...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Function",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Function operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_function.py",
      "module_name": "sympy.core",
      "class_name": "Function"
    },
    "sympy-core-function-adjoint": {
      "id": "sympy-core-function-adjoint",
      "name": "SymPy Function.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Function.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_function_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Function",
      "method_name": "adjoint"
    },
    "sympy-core-function-apart": {
      "id": "sympy-core-function-apart",
      "name": "SymPy Function.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Function.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_function_apart.py",
      "module_name": "sympy.core",
      "class_name": "Function",
      "method_name": "apart"
    },
    "sympy-core-function-args_cnc": {
      "id": "sympy-core-function-args_cnc",
      "name": "SymPy Function.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Function.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_function_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Function",
      "method_name": "args_cnc"
    },
    "sympy-core-function-as_base_exp": {
      "id": "sympy-core-function-as_base_exp",
      "name": "SymPy Function.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Function.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_function_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Function",
      "method_name": "as_base_exp"
    },
    "sympy-core-function-as_coeff_Add": {
      "id": "sympy-core-function-as_coeff_Add",
      "name": "SymPy Function.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Function.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_function_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Function",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-functionclass": {
      "id": "sympy-core-functionclass",
      "name": "SymPy FunctionClass",
      "description": "Base class for function classes. FunctionClass is a subclass of type.\n\nUse Function('<function name>' [ , signature ]) to create\nundefined function classes.",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for FunctionClass",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionClass operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_functionclass.py",
      "module_name": "sympy.core",
      "class_name": "FunctionClass"
    },
    "sympy-core-ge": {
      "id": "sympy-core-ge",
      "name": "SymPy Ge",
      "description": "Class representations of inequalities.\n\nExplanation\n===========\n\nThe ``*Than`` classes represent inequal relationships, where the left-hand\nside is generally bigger or smaller than the right-hand side...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Ge",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ge operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_ge.py",
      "module_name": "sympy.core",
      "class_name": "Ge"
    },
    "sympy-core-ge-as_content_primitive": {
      "id": "sympy-core-ge-as_content_primitive",
      "name": "SymPy Ge.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ge.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_ge_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Ge",
      "method_name": "as_content_primitive"
    },
    "sympy-core-ge-as_dummy": {
      "id": "sympy-core-ge-as_dummy",
      "name": "SymPy Ge.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ge.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_ge_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Ge",
      "method_name": "as_dummy"
    },
    "sympy-core-ge-as_set": {
      "id": "sympy-core-ge-as_set",
      "name": "SymPy Ge.as_set",
      "description": "Rewrites Boolean expression in terms of real sets.\n\nExamples\n========\n\n>>> from sympy import Symbol, Eq, Or, And\n>>> x = Symbol('x', real=True)\n>>> Eq(x, 0).as_set()\n{0}\n>>> (x > 0).as_set()\nInterval....",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ge.as_set"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_ge_as_set.py",
      "module_name": "sympy.core",
      "class_name": "Ge",
      "method_name": "as_set"
    },
    "sympy-core-ge-atoms": {
      "id": "sympy-core-ge-atoms",
      "name": "SymPy Ge.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ge.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_ge_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Ge",
      "method_name": "atoms"
    },
    "sympy-core-ge-class_key": {
      "id": "sympy-core-ge-class_key",
      "name": "SymPy Ge.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ge.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_ge_class_key.py",
      "module_name": "sympy.core",
      "class_name": "Ge",
      "method_name": "class_key"
    },
    "sympy-core-greaterthan": {
      "id": "sympy-core-greaterthan",
      "name": "SymPy GreaterThan",
      "description": "Class representations of inequalities.\n\nExplanation\n===========\n\nThe ``*Than`` classes represent inequal relationships, where the left-hand\nside is generally bigger or smaller than the right-hand side...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for GreaterThan",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from GreaterThan operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_greaterthan.py",
      "module_name": "sympy.core",
      "class_name": "GreaterThan"
    },
    "sympy-core-greaterthan-as_content_primitive": {
      "id": "sympy-core-greaterthan-as_content_primitive",
      "name": "SymPy GreaterThan.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from GreaterThan.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_greaterthan_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "GreaterThan",
      "method_name": "as_content_primitive"
    },
    "sympy-core-greaterthan-as_dummy": {
      "id": "sympy-core-greaterthan-as_dummy",
      "name": "SymPy GreaterThan.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from GreaterThan.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_greaterthan_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "GreaterThan",
      "method_name": "as_dummy"
    },
    "sympy-core-greaterthan-as_set": {
      "id": "sympy-core-greaterthan-as_set",
      "name": "SymPy GreaterThan.as_set",
      "description": "Rewrites Boolean expression in terms of real sets.\n\nExamples\n========\n\n>>> from sympy import Symbol, Eq, Or, And\n>>> x = Symbol('x', real=True)\n>>> Eq(x, 0).as_set()\n{0}\n>>> (x > 0).as_set()\nInterval....",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from GreaterThan.as_set"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_greaterthan_as_set.py",
      "module_name": "sympy.core",
      "class_name": "GreaterThan",
      "method_name": "as_set"
    },
    "sympy-core-greaterthan-atoms": {
      "id": "sympy-core-greaterthan-atoms",
      "name": "SymPy GreaterThan.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from GreaterThan.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_greaterthan_atoms.py",
      "module_name": "sympy.core",
      "class_name": "GreaterThan",
      "method_name": "atoms"
    },
    "sympy-core-greaterthan-class_key": {
      "id": "sympy-core-greaterthan-class_key",
      "name": "SymPy GreaterThan.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from GreaterThan.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_greaterthan_class_key.py",
      "module_name": "sympy.core",
      "class_name": "GreaterThan",
      "method_name": "class_key"
    },
    "sympy-core-gt": {
      "id": "sympy-core-gt",
      "name": "SymPy Gt",
      "description": "Class representations of inequalities.\n\nExplanation\n===========\n\nThe ``*Than`` classes represent inequal relationships, where the left-hand\nside is generally bigger or smaller than the right-hand side...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Gt",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Gt operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_gt.py",
      "module_name": "sympy.core",
      "class_name": "Gt"
    },
    "sympy-core-gt-as_content_primitive": {
      "id": "sympy-core-gt-as_content_primitive",
      "name": "SymPy Gt.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Gt.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_gt_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Gt",
      "method_name": "as_content_primitive"
    },
    "sympy-core-gt-as_dummy": {
      "id": "sympy-core-gt-as_dummy",
      "name": "SymPy Gt.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Gt.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_gt_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Gt",
      "method_name": "as_dummy"
    },
    "sympy-core-gt-as_set": {
      "id": "sympy-core-gt-as_set",
      "name": "SymPy Gt.as_set",
      "description": "Rewrites Boolean expression in terms of real sets.\n\nExamples\n========\n\n>>> from sympy import Symbol, Eq, Or, And\n>>> x = Symbol('x', real=True)\n>>> Eq(x, 0).as_set()\n{0}\n>>> (x > 0).as_set()\nInterval....",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Gt.as_set"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_gt_as_set.py",
      "module_name": "sympy.core",
      "class_name": "Gt",
      "method_name": "as_set"
    },
    "sympy-core-gt-atoms": {
      "id": "sympy-core-gt-atoms",
      "name": "SymPy Gt.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Gt.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_gt_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Gt",
      "method_name": "atoms"
    },
    "sympy-core-gt-class_key": {
      "id": "sympy-core-gt-class_key",
      "name": "SymPy Gt.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Gt.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_gt_class_key.py",
      "module_name": "sympy.core",
      "class_name": "Gt",
      "method_name": "class_key"
    },
    "sympy-core-integer": {
      "id": "sympy-core-integer",
      "name": "SymPy Integer",
      "description": "Represents integer numbers of any size.\n\nExamples\n========\n\n>>> from sympy import Integer\n>>> Integer(3)\n3\n\nIf a float or a rational is passed to Integer, the fractional part\nwill be discarded; the ef...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Integer",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Integer operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_integer.py",
      "module_name": "sympy.core",
      "class_name": "Integer"
    },
    "sympy-core-integer-adjoint": {
      "id": "sympy-core-integer-adjoint",
      "name": "SymPy Integer.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Integer.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_integer_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Integer",
      "method_name": "adjoint"
    },
    "sympy-core-integer-apart": {
      "id": "sympy-core-integer-apart",
      "name": "SymPy Integer.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Integer.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_integer_apart.py",
      "module_name": "sympy.core",
      "class_name": "Integer",
      "method_name": "apart"
    },
    "sympy-core-integer-args_cnc": {
      "id": "sympy-core-integer-args_cnc",
      "name": "SymPy Integer.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Integer.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_integer_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Integer",
      "method_name": "args_cnc"
    },
    "sympy-core-integer-as_base_exp": {
      "id": "sympy-core-integer-as_base_exp",
      "name": "SymPy Integer.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Integer.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_integer_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Integer",
      "method_name": "as_base_exp"
    },
    "sympy-core-integer-as_coeff_Add": {
      "id": "sympy-core-integer-as_coeff_Add",
      "name": "SymPy Integer.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Integer.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_integer_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Integer",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-lambda": {
      "id": "sympy-core-lambda",
      "name": "SymPy Lambda",
      "description": "Lambda(x, expr) represents a lambda function similar to Python's\n'lambda x: expr'. A function of several variables is written as\nLambda((x, y, ...), expr).\n\nExamples\n========\n\nA simple example:\n\n>>> f...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Lambda",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Lambda operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_lambda.py",
      "module_name": "sympy.core",
      "class_name": "Lambda"
    },
    "sympy-core-lambda-adjoint": {
      "id": "sympy-core-lambda-adjoint",
      "name": "SymPy Lambda.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Lambda.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_lambda_adjoint.py",
      "module_name": "sympy.core",
      "class_name": "Lambda",
      "method_name": "adjoint"
    },
    "sympy-core-lambda-apart": {
      "id": "sympy-core-lambda-apart",
      "name": "SymPy Lambda.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Lambda.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_lambda_apart.py",
      "module_name": "sympy.core",
      "class_name": "Lambda",
      "method_name": "apart"
    },
    "sympy-core-lambda-args_cnc": {
      "id": "sympy-core-lambda-args_cnc",
      "name": "SymPy Lambda.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Lambda.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_lambda_args_cnc.py",
      "module_name": "sympy.core",
      "class_name": "Lambda",
      "method_name": "args_cnc"
    },
    "sympy-core-lambda-as_base_exp": {
      "id": "sympy-core-lambda-as_base_exp",
      "name": "SymPy Lambda.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Lambda.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_lambda_as_base_exp.py",
      "module_name": "sympy.core",
      "class_name": "Lambda",
      "method_name": "as_base_exp"
    },
    "sympy-core-lambda-as_coeff_Add": {
      "id": "sympy-core-lambda-as_coeff_Add",
      "name": "SymPy Lambda.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Lambda.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_lambda_as_coeff_Add.py",
      "module_name": "sympy.core",
      "class_name": "Lambda",
      "method_name": "as_coeff_Add"
    },
    "sympy-core-le": {
      "id": "sympy-core-le",
      "name": "SymPy Le",
      "description": "Class representations of inequalities.\n\nExplanation\n===========\n\nThe ``*Than`` classes represent inequal relationships, where the left-hand\nside is generally bigger or smaller than the right-hand side...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Le",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Le operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_le.py",
      "module_name": "sympy.core",
      "class_name": "Le"
    },
    "sympy-core-le-as_content_primitive": {
      "id": "sympy-core-le-as_content_primitive",
      "name": "SymPy Le.as_content_primitive",
      "description": "A stub to allow Basic args (like Tuple) to be skipped when computing\nthe content and primitive components of an expression.\n\nSee Also\n========\n\nsympy.core.expr.Expr.as_content_primitive",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "radical": {
            "type": "string",
            "description": "Parameter radical for as_content_primitive",
            "default": "False"
          },
          "clear": {
            "type": "string",
            "description": "Parameter clear for as_content_primitive",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Le.as_content_primitive"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_le_as_content_primitive.py",
      "module_name": "sympy.core",
      "class_name": "Le",
      "method_name": "as_content_primitive"
    },
    "sympy-core-le-as_dummy": {
      "id": "sympy-core-le-as_dummy",
      "name": "SymPy Le.as_dummy",
      "description": "Return the expression with any objects having structurally\nbound symbols replaced with unique, canonical symbols within\nthe object in which they appear and having only the default\nassumption for commu...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Le.as_dummy"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_le_as_dummy.py",
      "module_name": "sympy.core",
      "class_name": "Le",
      "method_name": "as_dummy"
    },
    "sympy-core-le-as_set": {
      "id": "sympy-core-le-as_set",
      "name": "SymPy Le.as_set",
      "description": "Rewrites Boolean expression in terms of real sets.\n\nExamples\n========\n\n>>> from sympy import Symbol, Eq, Or, And\n>>> x = Symbol('x', real=True)\n>>> Eq(x, 0).as_set()\n{0}\n>>> (x > 0).as_set()\nInterval....",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Le.as_set"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_le_as_set.py",
      "module_name": "sympy.core",
      "class_name": "Le",
      "method_name": "as_set"
    },
    "sympy-core-le-atoms": {
      "id": "sympy-core-le-atoms",
      "name": "SymPy Le.atoms",
      "description": "Returns the atoms that form the current object.\n\nBy default, only objects that are truly atomic and cannot\nbe divided into smaller pieces are returned: symbols, numbers,\nand number symbols like I and ...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "types": {
            "type": "string",
            "description": "Parameter types for atoms"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Le.atoms"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_le_atoms.py",
      "module_name": "sympy.core",
      "class_name": "Le",
      "method_name": "atoms"
    },
    "sympy-core-le-class_key": {
      "id": "sympy-core-le-class_key",
      "name": "SymPy Le.class_key",
      "description": "Nice order of classes.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Le.class_key"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_core_le_class_key.py",
      "module_name": "sympy.core",
      "class_name": "Le",
      "method_name": "class_key"
    },
    "sympy-functions-abs": {
      "id": "sympy-functions-abs",
      "name": "SymPy Abs",
      "description": "Return the absolute value of the argument.\n\nExplanation\n===========\n\nThis is an extension of the built-in function ``abs()`` to accept symbolic\nvalues.  If you pass a SymPy expression to the built-in ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Abs",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Abs operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_abs.py",
      "module_name": "sympy.functions",
      "class_name": "Abs"
    },
    "sympy-functions-abs-adjoint": {
      "id": "sympy-functions-abs-adjoint",
      "name": "SymPy Abs.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Abs.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_abs_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Abs",
      "method_name": "adjoint"
    },
    "sympy-functions-abs-apart": {
      "id": "sympy-functions-abs-apart",
      "name": "SymPy Abs.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Abs.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_abs_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Abs",
      "method_name": "apart"
    },
    "sympy-functions-abs-args_cnc": {
      "id": "sympy-functions-abs-args_cnc",
      "name": "SymPy Abs.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Abs.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_abs_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Abs",
      "method_name": "args_cnc"
    },
    "sympy-functions-abs-as_base_exp": {
      "id": "sympy-functions-abs-as_base_exp",
      "name": "SymPy Abs.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Abs.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_abs_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Abs",
      "method_name": "as_base_exp"
    },
    "sympy-functions-abs-as_coeff_Add": {
      "id": "sympy-functions-abs-as_coeff_Add",
      "name": "SymPy Abs.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Abs.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_abs_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Abs",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-chi": {
      "id": "sympy-functions-chi",
      "name": "SymPy Chi",
      "description": "Cosh integral.\n\nExplanation\n===========\n\nThis function is defined for positive $x$ by\n\n.. math:: \\operatorname{Chi}(x) = \\gamma + \\log{x}\n                     + \\int_0^x \\frac{\\cosh{t} - 1}{t} \\mathrm...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Chi",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Chi operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_chi.py",
      "module_name": "sympy.functions",
      "class_name": "Chi"
    },
    "sympy-functions-chi-adjoint": {
      "id": "sympy-functions-chi-adjoint",
      "name": "SymPy Chi.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Chi.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_chi_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Chi",
      "method_name": "adjoint"
    },
    "sympy-functions-chi-apart": {
      "id": "sympy-functions-chi-apart",
      "name": "SymPy Chi.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Chi.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_chi_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Chi",
      "method_name": "apart"
    },
    "sympy-functions-chi-args_cnc": {
      "id": "sympy-functions-chi-args_cnc",
      "name": "SymPy Chi.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Chi.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_chi_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Chi",
      "method_name": "args_cnc"
    },
    "sympy-functions-chi-as_base_exp": {
      "id": "sympy-functions-chi-as_base_exp",
      "name": "SymPy Chi.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Chi.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_chi_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Chi",
      "method_name": "as_base_exp"
    },
    "sympy-functions-chi-as_coeff_Add": {
      "id": "sympy-functions-chi-as_coeff_Add",
      "name": "SymPy Chi.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Chi.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_chi_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Chi",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-ci": {
      "id": "sympy-functions-ci",
      "name": "SymPy Ci",
      "description": "Cosine integral.\n\nExplanation\n===========\n\nThis function is defined for positive $x$ by\n\n.. math:: \\operatorname{Ci}(x) = \\gamma + \\log{x}\n                     + \\int_0^x \\frac{\\cos{t} - 1}{t} \\mathrm...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Ci",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ci operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ci.py",
      "module_name": "sympy.functions",
      "class_name": "Ci"
    },
    "sympy-functions-ci-adjoint": {
      "id": "sympy-functions-ci-adjoint",
      "name": "SymPy Ci.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ci.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ci_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Ci",
      "method_name": "adjoint"
    },
    "sympy-functions-ci-apart": {
      "id": "sympy-functions-ci-apart",
      "name": "SymPy Ci.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ci.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ci_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Ci",
      "method_name": "apart"
    },
    "sympy-functions-ci-args_cnc": {
      "id": "sympy-functions-ci-args_cnc",
      "name": "SymPy Ci.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ci.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ci_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Ci",
      "method_name": "args_cnc"
    },
    "sympy-functions-ci-as_base_exp": {
      "id": "sympy-functions-ci-as_base_exp",
      "name": "SymPy Ci.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ci.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ci_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Ci",
      "method_name": "as_base_exp"
    },
    "sympy-functions-ci-as_coeff_Add": {
      "id": "sympy-functions-ci-as_coeff_Add",
      "name": "SymPy Ci.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ci.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ci_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Ci",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-diracdelta": {
      "id": "sympy-functions-diracdelta",
      "name": "SymPy DiracDelta",
      "description": "The DiracDelta function and its derivatives.\n\nExplanation\n===========\n\nDiracDelta is not an ordinary function. It can be rigorously defined either\nas a distribution or as a measure.\n\nDiracDelta only m...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for DiracDelta",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiracDelta operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_diracdelta.py",
      "module_name": "sympy.functions",
      "class_name": "DiracDelta"
    },
    "sympy-functions-diracdelta-adjoint": {
      "id": "sympy-functions-diracdelta-adjoint",
      "name": "SymPy DiracDelta.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiracDelta.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_diracdelta_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "DiracDelta",
      "method_name": "adjoint"
    },
    "sympy-functions-diracdelta-apart": {
      "id": "sympy-functions-diracdelta-apart",
      "name": "SymPy DiracDelta.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiracDelta.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_diracdelta_apart.py",
      "module_name": "sympy.functions",
      "class_name": "DiracDelta",
      "method_name": "apart"
    },
    "sympy-functions-diracdelta-args_cnc": {
      "id": "sympy-functions-diracdelta-args_cnc",
      "name": "SymPy DiracDelta.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiracDelta.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_diracdelta_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "DiracDelta",
      "method_name": "args_cnc"
    },
    "sympy-functions-diracdelta-as_base_exp": {
      "id": "sympy-functions-diracdelta-as_base_exp",
      "name": "SymPy DiracDelta.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiracDelta.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_diracdelta_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "DiracDelta",
      "method_name": "as_base_exp"
    },
    "sympy-functions-diracdelta-as_coeff_Add": {
      "id": "sympy-functions-diracdelta-as_coeff_Add",
      "name": "SymPy DiracDelta.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiracDelta.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_diracdelta_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "DiracDelta",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-ei": {
      "id": "sympy-functions-ei",
      "name": "SymPy Ei",
      "description": "The classical exponential integral.\n\nExplanation\n===========\n\nFor use in SymPy, this function is defined as\n\n.. math:: \\operatorname{Ei}(x) = \\sum_{n=1}^\\infty \\frac{x^n}{n\\, n!}\n                     ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Ei",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ei operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ei.py",
      "module_name": "sympy.functions",
      "class_name": "Ei"
    },
    "sympy-functions-ei-adjoint": {
      "id": "sympy-functions-ei-adjoint",
      "name": "SymPy Ei.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ei.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ei_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Ei",
      "method_name": "adjoint"
    },
    "sympy-functions-ei-apart": {
      "id": "sympy-functions-ei-apart",
      "name": "SymPy Ei.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ei.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ei_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Ei",
      "method_name": "apart"
    },
    "sympy-functions-ei-args_cnc": {
      "id": "sympy-functions-ei-args_cnc",
      "name": "SymPy Ei.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ei.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ei_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Ei",
      "method_name": "args_cnc"
    },
    "sympy-functions-ei-as_base_exp": {
      "id": "sympy-functions-ei-as_base_exp",
      "name": "SymPy Ei.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ei.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ei_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Ei",
      "method_name": "as_base_exp"
    },
    "sympy-functions-ei-as_coeff_Add": {
      "id": "sympy-functions-ei-as_coeff_Add",
      "name": "SymPy Ei.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ei.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ei_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Ei",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-fallingfactorial": {
      "id": "sympy-functions-fallingfactorial",
      "name": "SymPy FallingFactorial",
      "description": "Falling factorial (related to rising factorial) is a double valued\nfunction arising in concrete mathematics, hypergeometric functions\nand series expansions. It is defined by\n\n.. math:: \\texttt{ff(x, k...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for FallingFactorial",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FallingFactorial operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_fallingfactorial.py",
      "module_name": "sympy.functions",
      "class_name": "FallingFactorial"
    },
    "sympy-functions-fallingfactorial-adjoint": {
      "id": "sympy-functions-fallingfactorial-adjoint",
      "name": "SymPy FallingFactorial.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FallingFactorial.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_fallingfactorial_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "FallingFactorial",
      "method_name": "adjoint"
    },
    "sympy-functions-fallingfactorial-apart": {
      "id": "sympy-functions-fallingfactorial-apart",
      "name": "SymPy FallingFactorial.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FallingFactorial.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_fallingfactorial_apart.py",
      "module_name": "sympy.functions",
      "class_name": "FallingFactorial",
      "method_name": "apart"
    },
    "sympy-functions-fallingfactorial-args_cnc": {
      "id": "sympy-functions-fallingfactorial-args_cnc",
      "name": "SymPy FallingFactorial.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FallingFactorial.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_fallingfactorial_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "FallingFactorial",
      "method_name": "args_cnc"
    },
    "sympy-functions-fallingfactorial-as_base_exp": {
      "id": "sympy-functions-fallingfactorial-as_base_exp",
      "name": "SymPy FallingFactorial.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FallingFactorial.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_fallingfactorial_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "FallingFactorial",
      "method_name": "as_base_exp"
    },
    "sympy-functions-fallingfactorial-as_coeff_Add": {
      "id": "sympy-functions-fallingfactorial-as_coeff_Add",
      "name": "SymPy FallingFactorial.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FallingFactorial.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_fallingfactorial_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "FallingFactorial",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-heaviside": {
      "id": "sympy-functions-heaviside",
      "name": "SymPy Heaviside",
      "description": "Heaviside step function.\n\nExplanation\n===========\n\nThe Heaviside step function has the following properties:\n\n1) $\\frac{d}{d x} \\theta(x) = \\delta(x)$\n2) $\\theta(x) = \\begin{cases} 0 & \\text{for}\\: x ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Heaviside",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Heaviside operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_heaviside.py",
      "module_name": "sympy.functions",
      "class_name": "Heaviside"
    },
    "sympy-functions-heaviside-adjoint": {
      "id": "sympy-functions-heaviside-adjoint",
      "name": "SymPy Heaviside.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Heaviside.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_heaviside_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Heaviside",
      "method_name": "adjoint"
    },
    "sympy-functions-heaviside-apart": {
      "id": "sympy-functions-heaviside-apart",
      "name": "SymPy Heaviside.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Heaviside.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_heaviside_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Heaviside",
      "method_name": "apart"
    },
    "sympy-functions-heaviside-args_cnc": {
      "id": "sympy-functions-heaviside-args_cnc",
      "name": "SymPy Heaviside.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Heaviside.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_heaviside_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Heaviside",
      "method_name": "args_cnc"
    },
    "sympy-functions-heaviside-as_base_exp": {
      "id": "sympy-functions-heaviside-as_base_exp",
      "name": "SymPy Heaviside.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Heaviside.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_heaviside_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Heaviside",
      "method_name": "as_base_exp"
    },
    "sympy-functions-heaviside-as_coeff_Add": {
      "id": "sympy-functions-heaviside-as_coeff_Add",
      "name": "SymPy Heaviside.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Heaviside.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_heaviside_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Heaviside",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-kroneckerdelta": {
      "id": "sympy-functions-kroneckerdelta",
      "name": "SymPy KroneckerDelta",
      "description": "The discrete, or Kronecker, delta function.\n\nExplanation\n===========\n\nA function that takes in two integers $i$ and $j$. It returns $0$ if $i$\nand $j$ are not equal, or it returns $1$ if $i$ and $j$ a...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for KroneckerDelta",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerDelta operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_kroneckerdelta.py",
      "module_name": "sympy.functions",
      "class_name": "KroneckerDelta"
    },
    "sympy-functions-kroneckerdelta-adjoint": {
      "id": "sympy-functions-kroneckerdelta-adjoint",
      "name": "SymPy KroneckerDelta.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerDelta.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_kroneckerdelta_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "KroneckerDelta",
      "method_name": "adjoint"
    },
    "sympy-functions-kroneckerdelta-apart": {
      "id": "sympy-functions-kroneckerdelta-apart",
      "name": "SymPy KroneckerDelta.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerDelta.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_kroneckerdelta_apart.py",
      "module_name": "sympy.functions",
      "class_name": "KroneckerDelta",
      "method_name": "apart"
    },
    "sympy-functions-kroneckerdelta-args_cnc": {
      "id": "sympy-functions-kroneckerdelta-args_cnc",
      "name": "SymPy KroneckerDelta.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerDelta.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_kroneckerdelta_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "KroneckerDelta",
      "method_name": "args_cnc"
    },
    "sympy-functions-kroneckerdelta-as_base_exp": {
      "id": "sympy-functions-kroneckerdelta-as_base_exp",
      "name": "SymPy KroneckerDelta.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerDelta.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_kroneckerdelta_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "KroneckerDelta",
      "method_name": "as_base_exp"
    },
    "sympy-functions-kroneckerdelta-as_coeff_Add": {
      "id": "sympy-functions-kroneckerdelta-as_coeff_Add",
      "name": "SymPy KroneckerDelta.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerDelta.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_kroneckerdelta_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "KroneckerDelta",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-lambertw": {
      "id": "sympy-functions-lambertw",
      "name": "SymPy LambertW",
      "description": "The Lambert W function $W(z)$ is defined as the inverse\nfunction of $w \\exp(w)$ [1]_.\n\nExplanation\n===========\n\nIn other words, the value of $W(z)$ is such that $z = W(z) \\exp(W(z))$\nfor any complex n...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for LambertW",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LambertW operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_lambertw.py",
      "module_name": "sympy.functions",
      "class_name": "LambertW"
    },
    "sympy-functions-lambertw-adjoint": {
      "id": "sympy-functions-lambertw-adjoint",
      "name": "SymPy LambertW.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LambertW.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_lambertw_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "LambertW",
      "method_name": "adjoint"
    },
    "sympy-functions-lambertw-apart": {
      "id": "sympy-functions-lambertw-apart",
      "name": "SymPy LambertW.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LambertW.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_lambertw_apart.py",
      "module_name": "sympy.functions",
      "class_name": "LambertW",
      "method_name": "apart"
    },
    "sympy-functions-lambertw-args_cnc": {
      "id": "sympy-functions-lambertw-args_cnc",
      "name": "SymPy LambertW.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LambertW.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_lambertw_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "LambertW",
      "method_name": "args_cnc"
    },
    "sympy-functions-lambertw-as_base_exp": {
      "id": "sympy-functions-lambertw-as_base_exp",
      "name": "SymPy LambertW.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LambertW.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_lambertw_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "LambertW",
      "method_name": "as_base_exp"
    },
    "sympy-functions-lambertw-as_coeff_Add": {
      "id": "sympy-functions-lambertw-as_coeff_Add",
      "name": "SymPy LambertW.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LambertW.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_lambertw_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "LambertW",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-levicivita": {
      "id": "sympy-functions-levicivita",
      "name": "SymPy LeviCivita",
      "description": "Represent the Levi-Civita symbol.\n\nExplanation\n===========\n\nFor even permutations of indices it returns 1, for odd permutations -1, and\nfor everything else (a repeated index) it returns 0.\n\nThus it re...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for LeviCivita",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LeviCivita operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_levicivita.py",
      "module_name": "sympy.functions",
      "class_name": "LeviCivita"
    },
    "sympy-functions-levicivita-adjoint": {
      "id": "sympy-functions-levicivita-adjoint",
      "name": "SymPy LeviCivita.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LeviCivita.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_levicivita_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "LeviCivita",
      "method_name": "adjoint"
    },
    "sympy-functions-levicivita-apart": {
      "id": "sympy-functions-levicivita-apart",
      "name": "SymPy LeviCivita.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LeviCivita.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_levicivita_apart.py",
      "module_name": "sympy.functions",
      "class_name": "LeviCivita",
      "method_name": "apart"
    },
    "sympy-functions-levicivita-args_cnc": {
      "id": "sympy-functions-levicivita-args_cnc",
      "name": "SymPy LeviCivita.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LeviCivita.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_levicivita_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "LeviCivita",
      "method_name": "args_cnc"
    },
    "sympy-functions-levicivita-as_base_exp": {
      "id": "sympy-functions-levicivita-as_base_exp",
      "name": "SymPy LeviCivita.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LeviCivita.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_levicivita_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "LeviCivita",
      "method_name": "as_base_exp"
    },
    "sympy-functions-levicivita-as_coeff_Add": {
      "id": "sympy-functions-levicivita-as_coeff_Add",
      "name": "SymPy LeviCivita.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from LeviCivita.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_levicivita_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "LeviCivita",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-li": {
      "id": "sympy-functions-li",
      "name": "SymPy Li",
      "description": "The offset logarithmic integral.\n\nExplanation\n===========\n\nFor use in SymPy, this function is defined as\n\n.. math:: \\operatorname{Li}(x) = \\operatorname{li}(x) - \\operatorname{li}(2)\n\nExamples\n=======...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Li",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Li operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_li.py",
      "module_name": "sympy.functions",
      "class_name": "Li"
    },
    "sympy-functions-li-adjoint": {
      "id": "sympy-functions-li-adjoint",
      "name": "SymPy Li.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Li.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_li_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Li",
      "method_name": "adjoint"
    },
    "sympy-functions-li-apart": {
      "id": "sympy-functions-li-apart",
      "name": "SymPy Li.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Li.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_li_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Li",
      "method_name": "apart"
    },
    "sympy-functions-li-args_cnc": {
      "id": "sympy-functions-li-args_cnc",
      "name": "SymPy Li.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Li.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_li_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Li",
      "method_name": "args_cnc"
    },
    "sympy-functions-li-as_base_exp": {
      "id": "sympy-functions-li-as_base_exp",
      "name": "SymPy Li.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Li.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_li_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Li",
      "method_name": "as_base_exp"
    },
    "sympy-functions-li-as_coeff_Add": {
      "id": "sympy-functions-li-as_coeff_Add",
      "name": "SymPy Li.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Li.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_li_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Li",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-max": {
      "id": "sympy-functions-max",
      "name": "SymPy Max",
      "description": "Return, if possible, the maximum value of the list.\n\nWhen number of arguments is equal one, then\nreturn this argument.\n\nWhen number of arguments is equal two, then\nreturn, if possible, the value from ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Max",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Max operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_max.py",
      "module_name": "sympy.functions",
      "class_name": "Max"
    },
    "sympy-functions-max-adjoint": {
      "id": "sympy-functions-max-adjoint",
      "name": "SymPy Max.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Max.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_max_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Max",
      "method_name": "adjoint"
    },
    "sympy-functions-max-apart": {
      "id": "sympy-functions-max-apart",
      "name": "SymPy Max.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Max.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_max_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Max",
      "method_name": "apart"
    },
    "sympy-functions-max-args_cnc": {
      "id": "sympy-functions-max-args_cnc",
      "name": "SymPy Max.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Max.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_max_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Max",
      "method_name": "args_cnc"
    },
    "sympy-functions-max-as_base_exp": {
      "id": "sympy-functions-max-as_base_exp",
      "name": "SymPy Max.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Max.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_max_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Max",
      "method_name": "as_base_exp"
    },
    "sympy-functions-max-as_coeff_Add": {
      "id": "sympy-functions-max-as_coeff_Add",
      "name": "SymPy Max.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Max.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_max_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Max",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-min": {
      "id": "sympy-functions-min",
      "name": "SymPy Min",
      "description": "Return, if possible, the minimum value of the list.\nIt is named ``Min`` and not ``min`` to avoid conflicts\nwith the built-in function ``min``.\n\nExamples\n========\n\n>>> from sympy import Min, Symbol, oo...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Min",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Min operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_min.py",
      "module_name": "sympy.functions",
      "class_name": "Min"
    },
    "sympy-functions-min-adjoint": {
      "id": "sympy-functions-min-adjoint",
      "name": "SymPy Min.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Min.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_min_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Min",
      "method_name": "adjoint"
    },
    "sympy-functions-min-apart": {
      "id": "sympy-functions-min-apart",
      "name": "SymPy Min.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Min.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_min_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Min",
      "method_name": "apart"
    },
    "sympy-functions-min-args_cnc": {
      "id": "sympy-functions-min-args_cnc",
      "name": "SymPy Min.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Min.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_min_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Min",
      "method_name": "args_cnc"
    },
    "sympy-functions-min-as_base_exp": {
      "id": "sympy-functions-min-as_base_exp",
      "name": "SymPy Min.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Min.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_min_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Min",
      "method_name": "as_base_exp"
    },
    "sympy-functions-min-as_coeff_Add": {
      "id": "sympy-functions-min-as_coeff_Add",
      "name": "SymPy Min.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Min.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_min_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Min",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-piecewise": {
      "id": "sympy-functions-piecewise",
      "name": "SymPy Piecewise",
      "description": "Represents a piecewise function.\n\nUsage:\n\n  Piecewise( (expr,cond), (expr,cond), ... )\n    - Each argument is a 2-tuple defining an expression and condition\n    - The conds are evaluated in turn retur...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Piecewise",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Piecewise operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_piecewise.py",
      "module_name": "sympy.functions",
      "class_name": "Piecewise"
    },
    "sympy-functions-piecewise-adjoint": {
      "id": "sympy-functions-piecewise-adjoint",
      "name": "SymPy Piecewise.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Piecewise.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_piecewise_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Piecewise",
      "method_name": "adjoint"
    },
    "sympy-functions-piecewise-apart": {
      "id": "sympy-functions-piecewise-apart",
      "name": "SymPy Piecewise.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Piecewise.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_piecewise_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Piecewise",
      "method_name": "apart"
    },
    "sympy-functions-piecewise-args_cnc": {
      "id": "sympy-functions-piecewise-args_cnc",
      "name": "SymPy Piecewise.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Piecewise.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_piecewise_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Piecewise",
      "method_name": "args_cnc"
    },
    "sympy-functions-piecewise-as_base_exp": {
      "id": "sympy-functions-piecewise-as_base_exp",
      "name": "SymPy Piecewise.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Piecewise.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_piecewise_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Piecewise",
      "method_name": "as_base_exp"
    },
    "sympy-functions-piecewise-as_coeff_Add": {
      "id": "sympy-functions-piecewise-as_coeff_Add",
      "name": "SymPy Piecewise.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Piecewise.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_piecewise_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Piecewise",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-rem": {
      "id": "sympy-functions-rem",
      "name": "SymPy Rem",
      "description": "Returns the remainder when ``p`` is divided by ``q`` where ``p`` is finite\nand ``q`` is not equal to zero. The result, ``p - int(p/q)*q``, has the same sign\nas the divisor.\n\nParameters\n==========\n\np :...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Rem",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Rem operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_rem.py",
      "module_name": "sympy.functions",
      "class_name": "Rem"
    },
    "sympy-functions-rem-adjoint": {
      "id": "sympy-functions-rem-adjoint",
      "name": "SymPy Rem.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Rem.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_rem_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Rem",
      "method_name": "adjoint"
    },
    "sympy-functions-rem-apart": {
      "id": "sympy-functions-rem-apart",
      "name": "SymPy Rem.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Rem.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_rem_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Rem",
      "method_name": "apart"
    },
    "sympy-functions-rem-args_cnc": {
      "id": "sympy-functions-rem-args_cnc",
      "name": "SymPy Rem.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Rem.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_rem_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Rem",
      "method_name": "args_cnc"
    },
    "sympy-functions-rem-as_base_exp": {
      "id": "sympy-functions-rem-as_base_exp",
      "name": "SymPy Rem.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Rem.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_rem_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Rem",
      "method_name": "as_base_exp"
    },
    "sympy-functions-rem-as_coeff_Add": {
      "id": "sympy-functions-rem-as_coeff_Add",
      "name": "SymPy Rem.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Rem.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_rem_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Rem",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-risingfactorial": {
      "id": "sympy-functions-risingfactorial",
      "name": "SymPy RisingFactorial",
      "description": "Rising factorial (also called Pochhammer symbol [1]_) is a double valued\nfunction arising in concrete mathematics, hypergeometric functions\nand series expansions. It is defined by:\n\n.. math:: \\texttt{...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for RisingFactorial",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from RisingFactorial operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_risingfactorial.py",
      "module_name": "sympy.functions",
      "class_name": "RisingFactorial"
    },
    "sympy-functions-risingfactorial-adjoint": {
      "id": "sympy-functions-risingfactorial-adjoint",
      "name": "SymPy RisingFactorial.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from RisingFactorial.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_risingfactorial_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "RisingFactorial",
      "method_name": "adjoint"
    },
    "sympy-functions-risingfactorial-apart": {
      "id": "sympy-functions-risingfactorial-apart",
      "name": "SymPy RisingFactorial.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from RisingFactorial.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_risingfactorial_apart.py",
      "module_name": "sympy.functions",
      "class_name": "RisingFactorial",
      "method_name": "apart"
    },
    "sympy-functions-risingfactorial-args_cnc": {
      "id": "sympy-functions-risingfactorial-args_cnc",
      "name": "SymPy RisingFactorial.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from RisingFactorial.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_risingfactorial_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "RisingFactorial",
      "method_name": "args_cnc"
    },
    "sympy-functions-risingfactorial-as_base_exp": {
      "id": "sympy-functions-risingfactorial-as_base_exp",
      "name": "SymPy RisingFactorial.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from RisingFactorial.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_risingfactorial_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "RisingFactorial",
      "method_name": "as_base_exp"
    },
    "sympy-functions-risingfactorial-as_coeff_Add": {
      "id": "sympy-functions-risingfactorial-as_coeff_Add",
      "name": "SymPy RisingFactorial.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from RisingFactorial.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_risingfactorial_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "RisingFactorial",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-shi": {
      "id": "sympy-functions-shi",
      "name": "SymPy Shi",
      "description": "Sinh integral.\n\nExplanation\n===========\n\nThis function is defined by\n\n.. math:: \\operatorname{Shi}(z) = \\int_0^z \\frac{\\sinh{t}}{t} \\mathrm{d}t.\n\nIt is an entire function.\n\nExamples\n========\n\n>>> from...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Shi",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Shi operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_shi.py",
      "module_name": "sympy.functions",
      "class_name": "Shi"
    },
    "sympy-functions-shi-adjoint": {
      "id": "sympy-functions-shi-adjoint",
      "name": "SymPy Shi.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Shi.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_shi_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Shi",
      "method_name": "adjoint"
    },
    "sympy-functions-shi-apart": {
      "id": "sympy-functions-shi-apart",
      "name": "SymPy Shi.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Shi.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_shi_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Shi",
      "method_name": "apart"
    },
    "sympy-functions-shi-args_cnc": {
      "id": "sympy-functions-shi-args_cnc",
      "name": "SymPy Shi.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Shi.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_shi_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Shi",
      "method_name": "args_cnc"
    },
    "sympy-functions-shi-as_base_exp": {
      "id": "sympy-functions-shi-as_base_exp",
      "name": "SymPy Shi.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Shi.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_shi_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Shi",
      "method_name": "as_base_exp"
    },
    "sympy-functions-shi-as_coeff_Add": {
      "id": "sympy-functions-shi-as_coeff_Add",
      "name": "SymPy Shi.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Shi.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_shi_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Shi",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-si": {
      "id": "sympy-functions-si",
      "name": "SymPy Si",
      "description": "Sine integral.\n\nExplanation\n===========\n\nThis function is defined by\n\n.. math:: \\operatorname{Si}(z) = \\int_0^z \\frac{\\sin{t}}{t} \\mathrm{d}t.\n\nIt is an entire function.\n\nExamples\n========\n\n>>> from s...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Si",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Si operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_si.py",
      "module_name": "sympy.functions",
      "class_name": "Si"
    },
    "sympy-functions-si-adjoint": {
      "id": "sympy-functions-si-adjoint",
      "name": "SymPy Si.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Si.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_si_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Si",
      "method_name": "adjoint"
    },
    "sympy-functions-si-apart": {
      "id": "sympy-functions-si-apart",
      "name": "SymPy Si.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Si.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_si_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Si",
      "method_name": "apart"
    },
    "sympy-functions-si-args_cnc": {
      "id": "sympy-functions-si-args_cnc",
      "name": "SymPy Si.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Si.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_si_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Si",
      "method_name": "args_cnc"
    },
    "sympy-functions-si-as_base_exp": {
      "id": "sympy-functions-si-as_base_exp",
      "name": "SymPy Si.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Si.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_si_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Si",
      "method_name": "as_base_exp"
    },
    "sympy-functions-si-as_coeff_Add": {
      "id": "sympy-functions-si-as_coeff_Add",
      "name": "SymPy Si.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Si.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_si_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Si",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-singularityfunction": {
      "id": "sympy-functions-singularityfunction",
      "name": "SymPy SingularityFunction",
      "description": "Singularity functions are a class of discontinuous functions.\n\nExplanation\n===========\n\nSingularity functions take a variable, an offset, and an exponent as\narguments. These functions are represented ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for SingularityFunction",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from SingularityFunction operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_singularityfunction.py",
      "module_name": "sympy.functions",
      "class_name": "SingularityFunction"
    },
    "sympy-functions-singularityfunction-adjoint": {
      "id": "sympy-functions-singularityfunction-adjoint",
      "name": "SymPy SingularityFunction.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from SingularityFunction.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_singularityfunction_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "SingularityFunction",
      "method_name": "adjoint"
    },
    "sympy-functions-singularityfunction-apart": {
      "id": "sympy-functions-singularityfunction-apart",
      "name": "SymPy SingularityFunction.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from SingularityFunction.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_singularityfunction_apart.py",
      "module_name": "sympy.functions",
      "class_name": "SingularityFunction",
      "method_name": "apart"
    },
    "sympy-functions-singularityfunction-args_cnc": {
      "id": "sympy-functions-singularityfunction-args_cnc",
      "name": "SymPy SingularityFunction.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from SingularityFunction.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_singularityfunction_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "SingularityFunction",
      "method_name": "args_cnc"
    },
    "sympy-functions-singularityfunction-as_base_exp": {
      "id": "sympy-functions-singularityfunction-as_base_exp",
      "name": "SymPy SingularityFunction.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from SingularityFunction.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_singularityfunction_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "SingularityFunction",
      "method_name": "as_base_exp"
    },
    "sympy-functions-singularityfunction-as_coeff_Add": {
      "id": "sympy-functions-singularityfunction-as_coeff_Add",
      "name": "SymPy SingularityFunction.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from SingularityFunction.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_singularityfunction_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "SingularityFunction",
      "method_name": "as_coeff_Add"
    },
    "sympy-functions-ynm": {
      "id": "sympy-functions-ynm",
      "name": "SymPy Ynm",
      "description": "Spherical harmonics defined as\n\n.. math::\n    Y_n^m(\\theta, \\varphi) := \\sqrt{\\frac{(2n+1)(n-m)!}{4\\pi(n+m)!}}\n                              \\exp(i m \\varphi)\n                              \\mathrm{P}_...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Ynm",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ynm operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ynm.py",
      "module_name": "sympy.functions",
      "class_name": "Ynm"
    },
    "sympy-functions-ynm-adjoint": {
      "id": "sympy-functions-ynm-adjoint",
      "name": "SymPy Ynm.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ynm.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ynm_adjoint.py",
      "module_name": "sympy.functions",
      "class_name": "Ynm",
      "method_name": "adjoint"
    },
    "sympy-functions-ynm-apart": {
      "id": "sympy-functions-ynm-apart",
      "name": "SymPy Ynm.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ynm.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ynm_apart.py",
      "module_name": "sympy.functions",
      "class_name": "Ynm",
      "method_name": "apart"
    },
    "sympy-functions-ynm-args_cnc": {
      "id": "sympy-functions-ynm-args_cnc",
      "name": "SymPy Ynm.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ynm.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ynm_args_cnc.py",
      "module_name": "sympy.functions",
      "class_name": "Ynm",
      "method_name": "args_cnc"
    },
    "sympy-functions-ynm-as_base_exp": {
      "id": "sympy-functions-ynm-as_base_exp",
      "name": "SymPy Ynm.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ynm.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ynm_as_base_exp.py",
      "module_name": "sympy.functions",
      "class_name": "Ynm",
      "method_name": "as_base_exp"
    },
    "sympy-functions-ynm-as_coeff_Add": {
      "id": "sympy-functions-ynm-as_coeff_Add",
      "name": "SymPy Ynm.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Ynm.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_functions_ynm_as_coeff_Add.py",
      "module_name": "sympy.functions",
      "class_name": "Ynm",
      "method_name": "as_coeff_Add"
    },
    "sympy-matrices-adjoint": {
      "id": "sympy-matrices-adjoint",
      "name": "SymPy Adjoint",
      "description": "The Hermitian adjoint of a matrix expression.\n\nThis is a symbolic object that simply stores its argument without\nevaluating it. To actually compute the adjoint, use the ``adjoint()``\nfunction.\n\nExampl...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Adjoint",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Adjoint operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "Adjoint"
    },
    "sympy-matrices-adjoint-adjoint": {
      "id": "sympy-matrices-adjoint-adjoint",
      "name": "SymPy Adjoint.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Adjoint.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_adjoint_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "Adjoint",
      "method_name": "adjoint"
    },
    "sympy-matrices-adjoint-apart": {
      "id": "sympy-matrices-adjoint-apart",
      "name": "SymPy Adjoint.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Adjoint.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_adjoint_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "Adjoint",
      "method_name": "apart"
    },
    "sympy-matrices-adjoint-applyfunc": {
      "id": "sympy-matrices-adjoint-applyfunc",
      "name": "SymPy Adjoint.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Adjoint.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_adjoint_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "Adjoint",
      "method_name": "applyfunc"
    },
    "sympy-matrices-adjoint-args_cnc": {
      "id": "sympy-matrices-adjoint-args_cnc",
      "name": "SymPy Adjoint.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Adjoint.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_adjoint_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "Adjoint",
      "method_name": "args_cnc"
    },
    "sympy-matrices-adjoint-as_base_exp": {
      "id": "sympy-matrices-adjoint-as_base_exp",
      "name": "SymPy Adjoint.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Adjoint.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_adjoint_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "Adjoint",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-blockdiagmatrix": {
      "id": "sympy-matrices-blockdiagmatrix",
      "name": "SymPy BlockDiagMatrix",
      "description": "A sparse matrix with block matrices along its diagonals\n\nExamples\n========\n\n>>> from sympy import MatrixSymbol, BlockDiagMatrix, symbols\n>>> n, m, l = symbols('n m l')\n>>> X = MatrixSymbol('X', n, n)\n...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for BlockDiagMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockDiagMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockdiagmatrix.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockDiagMatrix"
    },
    "sympy-matrices-blockdiagmatrix-LDUdecomposition": {
      "id": "sympy-matrices-blockdiagmatrix-LDUdecomposition",
      "name": "SymPy BlockDiagMatrix.LDUdecomposition",
      "description": "Returns the Block LDU decomposition of\na 2x2 Block Matrix\n\nReturns\n=======\n\n(L, D, U) : Matrices\n    L : Lower Diagonal Matrix\n    D : Diagonal Matrix\n    U : Upper Diagonal Matrix\n\nExamples\n========\n...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockDiagMatrix.LDUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockdiagmatrix_LDUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockDiagMatrix",
      "method_name": "LDUdecomposition"
    },
    "sympy-matrices-blockdiagmatrix-LUdecomposition": {
      "id": "sympy-matrices-blockdiagmatrix-LUdecomposition",
      "name": "SymPy BlockDiagMatrix.LUdecomposition",
      "description": "Returns the Block LU decomposition of\na 2x2 Block Matrix\n\nReturns\n=======\n\n(L, U) : Matrices\n    L : Lower Diagonal Matrix\n    U : Upper Diagonal Matrix\n\nExamples\n========\n\n>>> from sympy import symbo...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockDiagMatrix.LUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockdiagmatrix_LUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockDiagMatrix",
      "method_name": "LUdecomposition"
    },
    "sympy-matrices-blockdiagmatrix-UDLdecomposition": {
      "id": "sympy-matrices-blockdiagmatrix-UDLdecomposition",
      "name": "SymPy BlockDiagMatrix.UDLdecomposition",
      "description": "Returns the Block UDL decomposition of\na 2x2 Block Matrix\n\nReturns\n=======\n\n(U, D, L) : Matrices\n    U : Upper Diagonal Matrix\n    D : Diagonal Matrix\n    L : Lower Diagonal Matrix\n\nExamples\n========\n...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockDiagMatrix.UDLdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockdiagmatrix_UDLdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockDiagMatrix",
      "method_name": "UDLdecomposition"
    },
    "sympy-matrices-blockdiagmatrix-adjoint": {
      "id": "sympy-matrices-blockdiagmatrix-adjoint",
      "name": "SymPy BlockDiagMatrix.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockDiagMatrix.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockdiagmatrix_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockDiagMatrix",
      "method_name": "adjoint"
    },
    "sympy-matrices-blockdiagmatrix-apart": {
      "id": "sympy-matrices-blockdiagmatrix-apart",
      "name": "SymPy BlockDiagMatrix.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockDiagMatrix.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockdiagmatrix_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockDiagMatrix",
      "method_name": "apart"
    },
    "sympy-matrices-blockmatrix": {
      "id": "sympy-matrices-blockmatrix",
      "name": "SymPy BlockMatrix",
      "description": "A BlockMatrix is a Matrix comprised of other matrices.\n\nThe submatrices are stored in a SymPy Matrix object but accessed as part of\na Matrix Expression\n\n>>> from sympy import (MatrixSymbol, BlockMatri...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for BlockMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockmatrix.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockMatrix"
    },
    "sympy-matrices-blockmatrix-LDUdecomposition": {
      "id": "sympy-matrices-blockmatrix-LDUdecomposition",
      "name": "SymPy BlockMatrix.LDUdecomposition",
      "description": "Returns the Block LDU decomposition of\na 2x2 Block Matrix\n\nReturns\n=======\n\n(L, D, U) : Matrices\n    L : Lower Diagonal Matrix\n    D : Diagonal Matrix\n    U : Upper Diagonal Matrix\n\nExamples\n========\n...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockMatrix.LDUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockmatrix_LDUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockMatrix",
      "method_name": "LDUdecomposition"
    },
    "sympy-matrices-blockmatrix-LUdecomposition": {
      "id": "sympy-matrices-blockmatrix-LUdecomposition",
      "name": "SymPy BlockMatrix.LUdecomposition",
      "description": "Returns the Block LU decomposition of\na 2x2 Block Matrix\n\nReturns\n=======\n\n(L, U) : Matrices\n    L : Lower Diagonal Matrix\n    U : Upper Diagonal Matrix\n\nExamples\n========\n\n>>> from sympy import symbo...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockMatrix.LUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockmatrix_LUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockMatrix",
      "method_name": "LUdecomposition"
    },
    "sympy-matrices-blockmatrix-UDLdecomposition": {
      "id": "sympy-matrices-blockmatrix-UDLdecomposition",
      "name": "SymPy BlockMatrix.UDLdecomposition",
      "description": "Returns the Block UDL decomposition of\na 2x2 Block Matrix\n\nReturns\n=======\n\n(U, D, L) : Matrices\n    U : Upper Diagonal Matrix\n    D : Diagonal Matrix\n    L : Lower Diagonal Matrix\n\nExamples\n========\n...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockMatrix.UDLdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockmatrix_UDLdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockMatrix",
      "method_name": "UDLdecomposition"
    },
    "sympy-matrices-blockmatrix-adjoint": {
      "id": "sympy-matrices-blockmatrix-adjoint",
      "name": "SymPy BlockMatrix.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockMatrix.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockmatrix_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockMatrix",
      "method_name": "adjoint"
    },
    "sympy-matrices-blockmatrix-apart": {
      "id": "sympy-matrices-blockmatrix-apart",
      "name": "SymPy BlockMatrix.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from BlockMatrix.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_blockmatrix_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "BlockMatrix",
      "method_name": "apart"
    },
    "sympy-matrices-deferredvector": {
      "id": "sympy-matrices-deferredvector",
      "name": "SymPy DeferredVector",
      "description": "A vector whose components are deferred (e.g. for use with lambdify).\n\nExamples\n========\n\n>>> from sympy import DeferredVector, lambdify\n>>> X = DeferredVector( 'X' )\n>>> X\nX\n>>> expr = (X[0] + 2, X[2]...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for DeferredVector",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DeferredVector operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_deferredvector.py",
      "module_name": "sympy.matrices",
      "class_name": "DeferredVector"
    },
    "sympy-matrices-deferredvector-adjoint": {
      "id": "sympy-matrices-deferredvector-adjoint",
      "name": "SymPy DeferredVector.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DeferredVector.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_deferredvector_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "DeferredVector",
      "method_name": "adjoint"
    },
    "sympy-matrices-deferredvector-apart": {
      "id": "sympy-matrices-deferredvector-apart",
      "name": "SymPy DeferredVector.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DeferredVector.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_deferredvector_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "DeferredVector",
      "method_name": "apart"
    },
    "sympy-matrices-deferredvector-args_cnc": {
      "id": "sympy-matrices-deferredvector-args_cnc",
      "name": "SymPy DeferredVector.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DeferredVector.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_deferredvector_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "DeferredVector",
      "method_name": "args_cnc"
    },
    "sympy-matrices-deferredvector-as_base_exp": {
      "id": "sympy-matrices-deferredvector-as_base_exp",
      "name": "SymPy DeferredVector.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DeferredVector.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_deferredvector_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "DeferredVector",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-deferredvector-as_coeff_Add": {
      "id": "sympy-matrices-deferredvector-as_coeff_Add",
      "name": "SymPy DeferredVector.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DeferredVector.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_deferredvector_as_coeff_Add.py",
      "module_name": "sympy.matrices",
      "class_name": "DeferredVector",
      "method_name": "as_coeff_Add"
    },
    "sympy-matrices-determinant": {
      "id": "sympy-matrices-determinant",
      "name": "SymPy Determinant",
      "description": "Matrix Determinant\n\nRepresents the determinant of a matrix expression.\n\nExamples\n========\n\n>>> from sympy import MatrixSymbol, Determinant, eye\n>>> A = MatrixSymbol('A', 3, 3)\n>>> Determinant(A)\nDeter...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Determinant",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Determinant operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_determinant.py",
      "module_name": "sympy.matrices",
      "class_name": "Determinant"
    },
    "sympy-matrices-determinant-adjoint": {
      "id": "sympy-matrices-determinant-adjoint",
      "name": "SymPy Determinant.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Determinant.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_determinant_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "Determinant",
      "method_name": "adjoint"
    },
    "sympy-matrices-determinant-apart": {
      "id": "sympy-matrices-determinant-apart",
      "name": "SymPy Determinant.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Determinant.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_determinant_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "Determinant",
      "method_name": "apart"
    },
    "sympy-matrices-determinant-args_cnc": {
      "id": "sympy-matrices-determinant-args_cnc",
      "name": "SymPy Determinant.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Determinant.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_determinant_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "Determinant",
      "method_name": "args_cnc"
    },
    "sympy-matrices-determinant-as_base_exp": {
      "id": "sympy-matrices-determinant-as_base_exp",
      "name": "SymPy Determinant.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Determinant.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_determinant_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "Determinant",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-determinant-as_coeff_Add": {
      "id": "sympy-matrices-determinant-as_coeff_Add",
      "name": "SymPy Determinant.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Determinant.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_determinant_as_coeff_Add.py",
      "module_name": "sympy.matrices",
      "class_name": "Determinant",
      "method_name": "as_coeff_Add"
    },
    "sympy-matrices-diagmatrix": {
      "id": "sympy-matrices-diagmatrix",
      "name": "SymPy DiagMatrix",
      "description": "Turn a vector into a diagonal matrix.",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for DiagMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagmatrix.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagMatrix"
    },
    "sympy-matrices-diagmatrix-adjoint": {
      "id": "sympy-matrices-diagmatrix-adjoint",
      "name": "SymPy DiagMatrix.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagMatrix.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagmatrix_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagMatrix",
      "method_name": "adjoint"
    },
    "sympy-matrices-diagmatrix-apart": {
      "id": "sympy-matrices-diagmatrix-apart",
      "name": "SymPy DiagMatrix.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagMatrix.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagmatrix_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagMatrix",
      "method_name": "apart"
    },
    "sympy-matrices-diagmatrix-applyfunc": {
      "id": "sympy-matrices-diagmatrix-applyfunc",
      "name": "SymPy DiagMatrix.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagMatrix.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagmatrix_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagMatrix",
      "method_name": "applyfunc"
    },
    "sympy-matrices-diagmatrix-args_cnc": {
      "id": "sympy-matrices-diagmatrix-args_cnc",
      "name": "SymPy DiagMatrix.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagMatrix.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagmatrix_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagMatrix",
      "method_name": "args_cnc"
    },
    "sympy-matrices-diagmatrix-as_base_exp": {
      "id": "sympy-matrices-diagmatrix-as_base_exp",
      "name": "SymPy DiagMatrix.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagMatrix.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagmatrix_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagMatrix",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-diagonalmatrix": {
      "id": "sympy-matrices-diagonalmatrix",
      "name": "SymPy DiagonalMatrix",
      "description": "DiagonalMatrix(M) will create a matrix expression that\nbehaves as though all off-diagonal elements,\n`M[i, j]` where `i != j`, are zero.\n\nExamples\n========\n\n>>> from sympy import MatrixSymbol, Diagonal...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for DiagonalMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalmatrix.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalMatrix"
    },
    "sympy-matrices-diagonalmatrix-adjoint": {
      "id": "sympy-matrices-diagonalmatrix-adjoint",
      "name": "SymPy DiagonalMatrix.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalMatrix.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalmatrix_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalMatrix",
      "method_name": "adjoint"
    },
    "sympy-matrices-diagonalmatrix-apart": {
      "id": "sympy-matrices-diagonalmatrix-apart",
      "name": "SymPy DiagonalMatrix.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalMatrix.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalmatrix_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalMatrix",
      "method_name": "apart"
    },
    "sympy-matrices-diagonalmatrix-applyfunc": {
      "id": "sympy-matrices-diagonalmatrix-applyfunc",
      "name": "SymPy DiagonalMatrix.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalMatrix.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalmatrix_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalMatrix",
      "method_name": "applyfunc"
    },
    "sympy-matrices-diagonalmatrix-args_cnc": {
      "id": "sympy-matrices-diagonalmatrix-args_cnc",
      "name": "SymPy DiagonalMatrix.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalMatrix.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalmatrix_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalMatrix",
      "method_name": "args_cnc"
    },
    "sympy-matrices-diagonalmatrix-as_base_exp": {
      "id": "sympy-matrices-diagonalmatrix-as_base_exp",
      "name": "SymPy DiagonalMatrix.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalMatrix.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalmatrix_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalMatrix",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-diagonalof": {
      "id": "sympy-matrices-diagonalof",
      "name": "SymPy DiagonalOf",
      "description": "DiagonalOf(M) will create a matrix expression that\nis equivalent to the diagonal of `M`, represented as\na single column matrix.\n\nExamples\n========\n\n>>> from sympy import MatrixSymbol, DiagonalOf, Symb...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for DiagonalOf",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalOf operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalof.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalOf"
    },
    "sympy-matrices-diagonalof-adjoint": {
      "id": "sympy-matrices-diagonalof-adjoint",
      "name": "SymPy DiagonalOf.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalOf.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalof_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalOf",
      "method_name": "adjoint"
    },
    "sympy-matrices-diagonalof-apart": {
      "id": "sympy-matrices-diagonalof-apart",
      "name": "SymPy DiagonalOf.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalOf.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalof_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalOf",
      "method_name": "apart"
    },
    "sympy-matrices-diagonalof-applyfunc": {
      "id": "sympy-matrices-diagonalof-applyfunc",
      "name": "SymPy DiagonalOf.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalOf.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalof_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalOf",
      "method_name": "applyfunc"
    },
    "sympy-matrices-diagonalof-args_cnc": {
      "id": "sympy-matrices-diagonalof-args_cnc",
      "name": "SymPy DiagonalOf.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalOf.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalof_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalOf",
      "method_name": "args_cnc"
    },
    "sympy-matrices-diagonalof-as_base_exp": {
      "id": "sympy-matrices-diagonalof-as_base_exp",
      "name": "SymPy DiagonalOf.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DiagonalOf.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_diagonalof_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "DiagonalOf",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-dotproduct": {
      "id": "sympy-matrices-dotproduct",
      "name": "SymPy DotProduct",
      "description": "Dot product of vector matrices\n\nThe input should be two 1 x n or n x 1 matrices. The output represents the\nscalar dotproduct.\n\nThis is similar to using MatrixElement and MatMul, except DotProduct does...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for DotProduct",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DotProduct operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_dotproduct.py",
      "module_name": "sympy.matrices",
      "class_name": "DotProduct"
    },
    "sympy-matrices-dotproduct-adjoint": {
      "id": "sympy-matrices-dotproduct-adjoint",
      "name": "SymPy DotProduct.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DotProduct.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_dotproduct_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "DotProduct",
      "method_name": "adjoint"
    },
    "sympy-matrices-dotproduct-apart": {
      "id": "sympy-matrices-dotproduct-apart",
      "name": "SymPy DotProduct.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DotProduct.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_dotproduct_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "DotProduct",
      "method_name": "apart"
    },
    "sympy-matrices-dotproduct-args_cnc": {
      "id": "sympy-matrices-dotproduct-args_cnc",
      "name": "SymPy DotProduct.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DotProduct.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_dotproduct_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "DotProduct",
      "method_name": "args_cnc"
    },
    "sympy-matrices-dotproduct-as_base_exp": {
      "id": "sympy-matrices-dotproduct-as_base_exp",
      "name": "SymPy DotProduct.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DotProduct.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_dotproduct_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "DotProduct",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-dotproduct-as_coeff_Add": {
      "id": "sympy-matrices-dotproduct-as_coeff_Add",
      "name": "SymPy DotProduct.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from DotProduct.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_dotproduct_as_coeff_Add.py",
      "module_name": "sympy.matrices",
      "class_name": "DotProduct",
      "method_name": "as_coeff_Add"
    },
    "sympy-matrices-functionmatrix": {
      "id": "sympy-matrices-functionmatrix",
      "name": "SymPy FunctionMatrix",
      "description": "Represents a matrix using a function (``Lambda``) which gives\noutputs according to the coordinates of each matrix entries.\n\nParameters\n==========\n\nrows : nonnegative integer. Can be symbolic.\n\ncols : ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for FunctionMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_functionmatrix.py",
      "module_name": "sympy.matrices",
      "class_name": "FunctionMatrix"
    },
    "sympy-matrices-functionmatrix-adjoint": {
      "id": "sympy-matrices-functionmatrix-adjoint",
      "name": "SymPy FunctionMatrix.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionMatrix.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_functionmatrix_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "FunctionMatrix",
      "method_name": "adjoint"
    },
    "sympy-matrices-functionmatrix-apart": {
      "id": "sympy-matrices-functionmatrix-apart",
      "name": "SymPy FunctionMatrix.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionMatrix.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_functionmatrix_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "FunctionMatrix",
      "method_name": "apart"
    },
    "sympy-matrices-functionmatrix-applyfunc": {
      "id": "sympy-matrices-functionmatrix-applyfunc",
      "name": "SymPy FunctionMatrix.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionMatrix.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_functionmatrix_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "FunctionMatrix",
      "method_name": "applyfunc"
    },
    "sympy-matrices-functionmatrix-args_cnc": {
      "id": "sympy-matrices-functionmatrix-args_cnc",
      "name": "SymPy FunctionMatrix.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionMatrix.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_functionmatrix_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "FunctionMatrix",
      "method_name": "args_cnc"
    },
    "sympy-matrices-functionmatrix-as_base_exp": {
      "id": "sympy-matrices-functionmatrix-as_base_exp",
      "name": "SymPy FunctionMatrix.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from FunctionMatrix.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_functionmatrix_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "FunctionMatrix",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-hadamardpower": {
      "id": "sympy-matrices-hadamardpower",
      "name": "SymPy HadamardPower",
      "description": "Elementwise power of matrix expressions\n\nParameters\n==========\n\nbase : scalar or matrix\n\nexp : scalar or matrix\n\nNotes\n=====\n\nThere are four definitions for the hadamard power which can be used.\nLet's...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for HadamardPower",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardPower operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardpower.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardPower"
    },
    "sympy-matrices-hadamardpower-adjoint": {
      "id": "sympy-matrices-hadamardpower-adjoint",
      "name": "SymPy HadamardPower.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardPower.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardpower_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardPower",
      "method_name": "adjoint"
    },
    "sympy-matrices-hadamardpower-apart": {
      "id": "sympy-matrices-hadamardpower-apart",
      "name": "SymPy HadamardPower.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardPower.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardpower_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardPower",
      "method_name": "apart"
    },
    "sympy-matrices-hadamardpower-applyfunc": {
      "id": "sympy-matrices-hadamardpower-applyfunc",
      "name": "SymPy HadamardPower.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardPower.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardpower_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardPower",
      "method_name": "applyfunc"
    },
    "sympy-matrices-hadamardpower-args_cnc": {
      "id": "sympy-matrices-hadamardpower-args_cnc",
      "name": "SymPy HadamardPower.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardPower.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardpower_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardPower",
      "method_name": "args_cnc"
    },
    "sympy-matrices-hadamardpower-as_base_exp": {
      "id": "sympy-matrices-hadamardpower-as_base_exp",
      "name": "SymPy HadamardPower.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardPower.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardpower_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardPower",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-hadamardproduct": {
      "id": "sympy-matrices-hadamardproduct",
      "name": "SymPy HadamardProduct",
      "description": "Elementwise product of matrix expressions\n\nExamples\n========\n\nHadamard product for matrix symbols:\n\n>>> from sympy import hadamard_product, HadamardProduct, MatrixSymbol\n>>> A = MatrixSymbol('A', 5, 5...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for HadamardProduct",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardProduct operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardproduct.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardProduct"
    },
    "sympy-matrices-hadamardproduct-adjoint": {
      "id": "sympy-matrices-hadamardproduct-adjoint",
      "name": "SymPy HadamardProduct.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardProduct.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardproduct_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardProduct",
      "method_name": "adjoint"
    },
    "sympy-matrices-hadamardproduct-apart": {
      "id": "sympy-matrices-hadamardproduct-apart",
      "name": "SymPy HadamardProduct.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardProduct.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardproduct_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardProduct",
      "method_name": "apart"
    },
    "sympy-matrices-hadamardproduct-applyfunc": {
      "id": "sympy-matrices-hadamardproduct-applyfunc",
      "name": "SymPy HadamardProduct.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardProduct.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardproduct_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardProduct",
      "method_name": "applyfunc"
    },
    "sympy-matrices-hadamardproduct-args_cnc": {
      "id": "sympy-matrices-hadamardproduct-args_cnc",
      "name": "SymPy HadamardProduct.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardProduct.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardproduct_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardProduct",
      "method_name": "args_cnc"
    },
    "sympy-matrices-hadamardproduct-as_base_exp": {
      "id": "sympy-matrices-hadamardproduct-as_base_exp",
      "name": "SymPy HadamardProduct.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from HadamardProduct.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_hadamardproduct_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "HadamardProduct",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-identity": {
      "id": "sympy-matrices-identity",
      "name": "SymPy Identity",
      "description": "The Matrix Identity I - multiplicative identity\n\nExamples\n========\n\n>>> from sympy import Identity, MatrixSymbol\n>>> A = MatrixSymbol('A', 3, 5)\n>>> I = Identity(3)\n>>> I*A\nA",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Identity",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Identity operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_identity.py",
      "module_name": "sympy.matrices",
      "class_name": "Identity"
    },
    "sympy-matrices-identity-adjoint": {
      "id": "sympy-matrices-identity-adjoint",
      "name": "SymPy Identity.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Identity.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_identity_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "Identity",
      "method_name": "adjoint"
    },
    "sympy-matrices-identity-apart": {
      "id": "sympy-matrices-identity-apart",
      "name": "SymPy Identity.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Identity.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_identity_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "Identity",
      "method_name": "apart"
    },
    "sympy-matrices-identity-applyfunc": {
      "id": "sympy-matrices-identity-applyfunc",
      "name": "SymPy Identity.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Identity.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_identity_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "Identity",
      "method_name": "applyfunc"
    },
    "sympy-matrices-identity-args_cnc": {
      "id": "sympy-matrices-identity-args_cnc",
      "name": "SymPy Identity.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Identity.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_identity_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "Identity",
      "method_name": "args_cnc"
    },
    "sympy-matrices-identity-as_base_exp": {
      "id": "sympy-matrices-identity-as_base_exp",
      "name": "SymPy Identity.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Identity.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_identity_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "Identity",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-immutabledensematrix": {
      "id": "sympy-matrices-immutabledensematrix",
      "name": "SymPy ImmutableDenseMatrix",
      "description": "Create an immutable version of a matrix.\n\nExamples\n========\n\n>>> from sympy import eye, ImmutableMatrix\n>>> ImmutableMatrix(eye(3))\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> _[0, 0] = 42\nTracebac...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for ImmutableDenseMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableDenseMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutabledensematrix.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableDenseMatrix"
    },
    "sympy-matrices-immutabledensematrix-LDLdecomposition": {
      "id": "sympy-matrices-immutabledensematrix-LDLdecomposition",
      "name": "SymPy ImmutableDenseMatrix.LDLdecomposition",
      "description": "Returns the LDL Decomposition (L, D) of matrix A,\nsuch that L * D * L.H == A if hermitian flag is True, or\nL * D * L.T == A if hermitian is False.\nThis method eliminates the use of square root.\nFurthe...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "hermitian": {
            "type": "string",
            "description": "Parameter hermitian for LDLdecomposition",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableDenseMatrix.LDLdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutabledensematrix_LDLdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableDenseMatrix",
      "method_name": "LDLdecomposition"
    },
    "sympy-matrices-immutabledensematrix-LDLsolve": {
      "id": "sympy-matrices-immutabledensematrix-LDLsolve",
      "name": "SymPy ImmutableDenseMatrix.LDLsolve",
      "description": "Solves ``Ax = B`` using LDL decomposition,\nfor a general square and non-singular matrix.\n\nFor a non-square matrix with rows > cols,\nthe least squares solution is returned.\n\nExamples\n========\n\n>>> from...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rhs": {
            "type": "string",
            "description": "Parameter rhs for LDLsolve"
          }
        },
        "required": [
          "rhs"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableDenseMatrix.LDLsolve"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutabledensematrix_LDLsolve.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableDenseMatrix",
      "method_name": "LDLsolve"
    },
    "sympy-matrices-immutabledensematrix-LUdecomposition": {
      "id": "sympy-matrices-immutabledensematrix-LUdecomposition",
      "name": "SymPy ImmutableDenseMatrix.LUdecomposition",
      "description": "Returns (L, U, perm) where L is a lower triangular matrix with unit\ndiagonal, U is an upper triangular matrix, and perm is a list of row\nswap index pairs. If A is the original matrix, then\n``A = (L*U)...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "iszerofunc": {
            "type": "string",
            "description": "Parameter iszerofunc for LUdecomposition",
            "default": "<function _iszero at 0x7f1c4ab3d440>"
          },
          "simpfunc": {
            "type": "string",
            "description": "Parameter simpfunc for LUdecomposition",
            "default": "None"
          },
          "rankcheck": {
            "type": "string",
            "description": "Parameter rankcheck for LUdecomposition",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableDenseMatrix.LUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutabledensematrix_LUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableDenseMatrix",
      "method_name": "LUdecomposition"
    },
    "sympy-matrices-immutabledensematrix-LUdecompositionFF": {
      "id": "sympy-matrices-immutabledensematrix-LUdecompositionFF",
      "name": "SymPy ImmutableDenseMatrix.LUdecompositionFF",
      "description": "Compute a fraction-free LU decomposition.\n\nReturns 4 matrices P, L, D, U such that PA = L D**-1 U.\nIf the elements of the matrix belong to some integral domain I, then all\nelements of L, D and U are g...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableDenseMatrix.LUdecompositionFF"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutabledensematrix_LUdecompositionFF.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableDenseMatrix",
      "method_name": "LUdecompositionFF"
    },
    "sympy-matrices-immutabledensematrix-LUdecomposition_Simple": {
      "id": "sympy-matrices-immutabledensematrix-LUdecomposition_Simple",
      "name": "SymPy ImmutableDenseMatrix.LUdecomposition_Simple",
      "description": "Compute the PLU decomposition of the matrix.\n\nParameters\n==========\n\nrankcheck : bool, optional\n    Determines if this function should detect the rank\n    deficiency of the matrixis and should raise a...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "iszerofunc": {
            "type": "string",
            "description": "Parameter iszerofunc for LUdecomposition_Simple",
            "default": "<function _iszero at 0x7f1c4ab3d440>"
          },
          "simpfunc": {
            "type": "string",
            "description": "Parameter simpfunc for LUdecomposition_Simple",
            "default": "None"
          },
          "rankcheck": {
            "type": "string",
            "description": "Parameter rankcheck for LUdecomposition_Simple",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableDenseMatrix.LUdecomposition_Simple"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutabledensematrix_LUdecomposition_Simple.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableDenseMatrix",
      "method_name": "LUdecomposition_Simple"
    },
    "sympy-matrices-immutablematrix": {
      "id": "sympy-matrices-immutablematrix",
      "name": "SymPy ImmutableMatrix",
      "description": "Create an immutable version of a matrix.\n\nExamples\n========\n\n>>> from sympy import eye, ImmutableMatrix\n>>> ImmutableMatrix(eye(3))\nMatrix([\n[1, 0, 0],\n[0, 1, 0],\n[0, 0, 1]])\n>>> _[0, 0] = 42\nTracebac...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for ImmutableMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablematrix.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableMatrix"
    },
    "sympy-matrices-immutablematrix-LDLdecomposition": {
      "id": "sympy-matrices-immutablematrix-LDLdecomposition",
      "name": "SymPy ImmutableMatrix.LDLdecomposition",
      "description": "Returns the LDL Decomposition (L, D) of matrix A,\nsuch that L * D * L.H == A if hermitian flag is True, or\nL * D * L.T == A if hermitian is False.\nThis method eliminates the use of square root.\nFurthe...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "hermitian": {
            "type": "string",
            "description": "Parameter hermitian for LDLdecomposition",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableMatrix.LDLdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablematrix_LDLdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableMatrix",
      "method_name": "LDLdecomposition"
    },
    "sympy-matrices-immutablematrix-LDLsolve": {
      "id": "sympy-matrices-immutablematrix-LDLsolve",
      "name": "SymPy ImmutableMatrix.LDLsolve",
      "description": "Solves ``Ax = B`` using LDL decomposition,\nfor a general square and non-singular matrix.\n\nFor a non-square matrix with rows > cols,\nthe least squares solution is returned.\n\nExamples\n========\n\n>>> from...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rhs": {
            "type": "string",
            "description": "Parameter rhs for LDLsolve"
          }
        },
        "required": [
          "rhs"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableMatrix.LDLsolve"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablematrix_LDLsolve.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableMatrix",
      "method_name": "LDLsolve"
    },
    "sympy-matrices-immutablematrix-LUdecomposition": {
      "id": "sympy-matrices-immutablematrix-LUdecomposition",
      "name": "SymPy ImmutableMatrix.LUdecomposition",
      "description": "Returns (L, U, perm) where L is a lower triangular matrix with unit\ndiagonal, U is an upper triangular matrix, and perm is a list of row\nswap index pairs. If A is the original matrix, then\n``A = (L*U)...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "iszerofunc": {
            "type": "string",
            "description": "Parameter iszerofunc for LUdecomposition",
            "default": "<function _iszero at 0x7f1c4ab3d440>"
          },
          "simpfunc": {
            "type": "string",
            "description": "Parameter simpfunc for LUdecomposition",
            "default": "None"
          },
          "rankcheck": {
            "type": "string",
            "description": "Parameter rankcheck for LUdecomposition",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableMatrix.LUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablematrix_LUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableMatrix",
      "method_name": "LUdecomposition"
    },
    "sympy-matrices-immutablematrix-LUdecompositionFF": {
      "id": "sympy-matrices-immutablematrix-LUdecompositionFF",
      "name": "SymPy ImmutableMatrix.LUdecompositionFF",
      "description": "Compute a fraction-free LU decomposition.\n\nReturns 4 matrices P, L, D, U such that PA = L D**-1 U.\nIf the elements of the matrix belong to some integral domain I, then all\nelements of L, D and U are g...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableMatrix.LUdecompositionFF"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablematrix_LUdecompositionFF.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableMatrix",
      "method_name": "LUdecompositionFF"
    },
    "sympy-matrices-immutablematrix-LUdecomposition_Simple": {
      "id": "sympy-matrices-immutablematrix-LUdecomposition_Simple",
      "name": "SymPy ImmutableMatrix.LUdecomposition_Simple",
      "description": "Compute the PLU decomposition of the matrix.\n\nParameters\n==========\n\nrankcheck : bool, optional\n    Determines if this function should detect the rank\n    deficiency of the matrixis and should raise a...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "iszerofunc": {
            "type": "string",
            "description": "Parameter iszerofunc for LUdecomposition_Simple",
            "default": "<function _iszero at 0x7f1c4ab3d440>"
          },
          "simpfunc": {
            "type": "string",
            "description": "Parameter simpfunc for LUdecomposition_Simple",
            "default": "None"
          },
          "rankcheck": {
            "type": "string",
            "description": "Parameter rankcheck for LUdecomposition_Simple",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableMatrix.LUdecomposition_Simple"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablematrix_LUdecomposition_Simple.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableMatrix",
      "method_name": "LUdecomposition_Simple"
    },
    "sympy-matrices-immutablesparsematrix": {
      "id": "sympy-matrices-immutablesparsematrix",
      "name": "SymPy ImmutableSparseMatrix",
      "description": "Create an immutable version of a sparse matrix.\n\nExamples\n========\n\n>>> from sympy import eye, ImmutableSparseMatrix\n>>> ImmutableSparseMatrix(1, 1, {})\nMatrix([[0]])\n>>> ImmutableSparseMatrix(eye(3))...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for ImmutableSparseMatrix",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableSparseMatrix operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablesparsematrix.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableSparseMatrix"
    },
    "sympy-matrices-immutablesparsematrix-LDLdecomposition": {
      "id": "sympy-matrices-immutablesparsematrix-LDLdecomposition",
      "name": "SymPy ImmutableSparseMatrix.LDLdecomposition",
      "description": "Returns the LDL Decomposition (matrices ``L`` and ``D``) of matrix\n``A``, such that ``L * D * L.T == A``. ``A`` must be a square,\nsymmetric, positive-definite and non-singular.\n\nThis method eliminates...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "hermitian": {
            "type": "string",
            "description": "Parameter hermitian for LDLdecomposition",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableSparseMatrix.LDLdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablesparsematrix_LDLdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableSparseMatrix",
      "method_name": "LDLdecomposition"
    },
    "sympy-matrices-immutablesparsematrix-LDLsolve": {
      "id": "sympy-matrices-immutablesparsematrix-LDLsolve",
      "name": "SymPy ImmutableSparseMatrix.LDLsolve",
      "description": "Solves ``Ax = B`` using LDL decomposition,\nfor a general square and non-singular matrix.\n\nFor a non-square matrix with rows > cols,\nthe least squares solution is returned.\n\nExamples\n========\n\n>>> from...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rhs": {
            "type": "string",
            "description": "Parameter rhs for LDLsolve"
          }
        },
        "required": [
          "rhs"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableSparseMatrix.LDLsolve"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablesparsematrix_LDLsolve.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableSparseMatrix",
      "method_name": "LDLsolve"
    },
    "sympy-matrices-immutablesparsematrix-LUdecomposition": {
      "id": "sympy-matrices-immutablesparsematrix-LUdecomposition",
      "name": "SymPy ImmutableSparseMatrix.LUdecomposition",
      "description": "Returns (L, U, perm) where L is a lower triangular matrix with unit\ndiagonal, U is an upper triangular matrix, and perm is a list of row\nswap index pairs. If A is the original matrix, then\n``A = (L*U)...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "iszerofunc": {
            "type": "string",
            "description": "Parameter iszerofunc for LUdecomposition",
            "default": "<function _iszero at 0x7f1c4ab3d440>"
          },
          "simpfunc": {
            "type": "string",
            "description": "Parameter simpfunc for LUdecomposition",
            "default": "None"
          },
          "rankcheck": {
            "type": "string",
            "description": "Parameter rankcheck for LUdecomposition",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableSparseMatrix.LUdecomposition"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablesparsematrix_LUdecomposition.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableSparseMatrix",
      "method_name": "LUdecomposition"
    },
    "sympy-matrices-immutablesparsematrix-LUdecompositionFF": {
      "id": "sympy-matrices-immutablesparsematrix-LUdecompositionFF",
      "name": "SymPy ImmutableSparseMatrix.LUdecompositionFF",
      "description": "Compute a fraction-free LU decomposition.\n\nReturns 4 matrices P, L, D, U such that PA = L D**-1 U.\nIf the elements of the matrix belong to some integral domain I, then all\nelements of L, D and U are g...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableSparseMatrix.LUdecompositionFF"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablesparsematrix_LUdecompositionFF.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableSparseMatrix",
      "method_name": "LUdecompositionFF"
    },
    "sympy-matrices-immutablesparsematrix-LUdecomposition_Simple": {
      "id": "sympy-matrices-immutablesparsematrix-LUdecomposition_Simple",
      "name": "SymPy ImmutableSparseMatrix.LUdecomposition_Simple",
      "description": "Compute the PLU decomposition of the matrix.\n\nParameters\n==========\n\nrankcheck : bool, optional\n    Determines if this function should detect the rank\n    deficiency of the matrixis and should raise a...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "iszerofunc": {
            "type": "string",
            "description": "Parameter iszerofunc for LUdecomposition_Simple",
            "default": "<function _iszero at 0x7f1c4ab3d440>"
          },
          "simpfunc": {
            "type": "string",
            "description": "Parameter simpfunc for LUdecomposition_Simple",
            "default": "None"
          },
          "rankcheck": {
            "type": "string",
            "description": "Parameter rankcheck for LUdecomposition_Simple",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from ImmutableSparseMatrix.LUdecomposition_Simple"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_immutablesparsematrix_LUdecomposition_Simple.py",
      "module_name": "sympy.matrices",
      "class_name": "ImmutableSparseMatrix",
      "method_name": "LUdecomposition_Simple"
    },
    "sympy-matrices-inverse": {
      "id": "sympy-matrices-inverse",
      "name": "SymPy Inverse",
      "description": "The multiplicative inverse of a matrix expression\n\nThis is a symbolic object that simply stores its argument without\nevaluating it. To actually compute the inverse, use the ``.inverse()``\nmethod of ma...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for Inverse",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Inverse operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_inverse.py",
      "module_name": "sympy.matrices",
      "class_name": "Inverse"
    },
    "sympy-matrices-inverse-adjoint": {
      "id": "sympy-matrices-inverse-adjoint",
      "name": "SymPy Inverse.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Inverse.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_inverse_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "Inverse",
      "method_name": "adjoint"
    },
    "sympy-matrices-inverse-apart": {
      "id": "sympy-matrices-inverse-apart",
      "name": "SymPy Inverse.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Inverse.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_inverse_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "Inverse",
      "method_name": "apart"
    },
    "sympy-matrices-inverse-applyfunc": {
      "id": "sympy-matrices-inverse-applyfunc",
      "name": "SymPy Inverse.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Inverse.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_inverse_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "Inverse",
      "method_name": "applyfunc"
    },
    "sympy-matrices-inverse-args_cnc": {
      "id": "sympy-matrices-inverse-args_cnc",
      "name": "SymPy Inverse.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Inverse.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_inverse_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "Inverse",
      "method_name": "args_cnc"
    },
    "sympy-matrices-inverse-as_base_exp": {
      "id": "sympy-matrices-inverse-as_base_exp",
      "name": "SymPy Inverse.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from Inverse.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_inverse_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "Inverse",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-kroneckerproduct": {
      "id": "sympy-matrices-kroneckerproduct",
      "name": "SymPy KroneckerProduct",
      "description": "The Kronecker product of two or more arguments.\n\nThe Kronecker product is a non-commutative product of matrices.\nGiven two matrices of dimension (m, n) and (s, t) it produces a matrix\nof dimension (m ...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for KroneckerProduct",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerProduct operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_kroneckerproduct.py",
      "module_name": "sympy.matrices",
      "class_name": "KroneckerProduct"
    },
    "sympy-matrices-kroneckerproduct-adjoint": {
      "id": "sympy-matrices-kroneckerproduct-adjoint",
      "name": "SymPy KroneckerProduct.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerProduct.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_kroneckerproduct_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "KroneckerProduct",
      "method_name": "adjoint"
    },
    "sympy-matrices-kroneckerproduct-apart": {
      "id": "sympy-matrices-kroneckerproduct-apart",
      "name": "SymPy KroneckerProduct.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerProduct.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_kroneckerproduct_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "KroneckerProduct",
      "method_name": "apart"
    },
    "sympy-matrices-kroneckerproduct-applyfunc": {
      "id": "sympy-matrices-kroneckerproduct-applyfunc",
      "name": "SymPy KroneckerProduct.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerProduct.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_kroneckerproduct_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "KroneckerProduct",
      "method_name": "applyfunc"
    },
    "sympy-matrices-kroneckerproduct-args_cnc": {
      "id": "sympy-matrices-kroneckerproduct-args_cnc",
      "name": "SymPy KroneckerProduct.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerProduct.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_kroneckerproduct_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "KroneckerProduct",
      "method_name": "args_cnc"
    },
    "sympy-matrices-kroneckerproduct-as_base_exp": {
      "id": "sympy-matrices-kroneckerproduct-as_base_exp",
      "name": "SymPy KroneckerProduct.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from KroneckerProduct.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_kroneckerproduct_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "KroneckerProduct",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-matadd": {
      "id": "sympy-matrices-matadd",
      "name": "SymPy MatAdd",
      "description": "A Sum of Matrix Expressions\n\nMatAdd inherits from and operates like SymPy Add\n\nExamples\n========\n\n>>> from sympy import MatAdd, MatrixSymbol\n>>> A = MatrixSymbol('A', 5, 5)\n>>> B = MatrixSymbol('B', 5...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for MatAdd",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatAdd operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matadd.py",
      "module_name": "sympy.matrices",
      "class_name": "MatAdd"
    },
    "sympy-matrices-matadd-adjoint": {
      "id": "sympy-matrices-matadd-adjoint",
      "name": "SymPy MatAdd.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatAdd.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matadd_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "MatAdd",
      "method_name": "adjoint"
    },
    "sympy-matrices-matadd-apart": {
      "id": "sympy-matrices-matadd-apart",
      "name": "SymPy MatAdd.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatAdd.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matadd_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "MatAdd",
      "method_name": "apart"
    },
    "sympy-matrices-matadd-applyfunc": {
      "id": "sympy-matrices-matadd-applyfunc",
      "name": "SymPy MatAdd.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatAdd.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matadd_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "MatAdd",
      "method_name": "applyfunc"
    },
    "sympy-matrices-matadd-args_cnc": {
      "id": "sympy-matrices-matadd-args_cnc",
      "name": "SymPy MatAdd.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatAdd.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matadd_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "MatAdd",
      "method_name": "args_cnc"
    },
    "sympy-matrices-matadd-as_base_exp": {
      "id": "sympy-matrices-matadd-as_base_exp",
      "name": "SymPy MatAdd.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatAdd.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matadd_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "MatAdd",
      "method_name": "as_base_exp"
    },
    "sympy-matrices-matmul": {
      "id": "sympy-matrices-matmul",
      "name": "SymPy MatMul",
      "description": "A product of matrix expressions\n\nExamples\n========\n\n>>> from sympy import MatMul, MatrixSymbol\n>>> A = MatrixSymbol('A', 5, 4)\n>>> B = MatrixSymbol('B', 4, 3)\n>>> C = MatrixSymbol('C', 3, 6)\n>>> MatMu...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for MatMul",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatMul operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matmul.py",
      "module_name": "sympy.matrices",
      "class_name": "MatMul"
    },
    "sympy-matrices-matmul-adjoint": {
      "id": "sympy-matrices-matmul-adjoint",
      "name": "SymPy MatMul.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatMul.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matmul_adjoint.py",
      "module_name": "sympy.matrices",
      "class_name": "MatMul",
      "method_name": "adjoint"
    },
    "sympy-matrices-matmul-apart": {
      "id": "sympy-matrices-matmul-apart",
      "name": "SymPy MatMul.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatMul.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matmul_apart.py",
      "module_name": "sympy.matrices",
      "class_name": "MatMul",
      "method_name": "apart"
    },
    "sympy-matrices-matmul-applyfunc": {
      "id": "sympy-matrices-matmul-applyfunc",
      "name": "SymPy MatMul.applyfunc",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "func": {
            "type": "string",
            "description": "Parameter func for applyfunc"
          }
        },
        "required": [
          "func"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatMul.applyfunc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matmul_applyfunc.py",
      "module_name": "sympy.matrices",
      "class_name": "MatMul",
      "method_name": "applyfunc"
    },
    "sympy-matrices-matmul-args_cnc": {
      "id": "sympy-matrices-matmul-args_cnc",
      "name": "SymPy MatMul.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "kwargs": {
            "type": "string",
            "description": "Parameter kwargs for args_cnc"
          }
        },
        "required": [
          "kwargs"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatMul.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matmul_args_cnc.py",
      "module_name": "sympy.matrices",
      "class_name": "MatMul",
      "method_name": "args_cnc"
    },
    "sympy-matrices-matmul-as_base_exp": {
      "id": "sympy-matrices-matmul-as_base_exp",
      "name": "SymPy MatMul.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from MatMul.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_matrices_matmul_as_base_exp.py",
      "module_name": "sympy.matrices",
      "class_name": "MatMul",
      "method_name": "as_base_exp"
    },
    "sympy-calculus-accumbounds": {
      "id": "sympy-calculus-accumbounds",
      "name": "SymPy AccumBounds",
      "description": "An accumulation bounds.\n\n# Note AccumulationBounds has an alias: AccumBounds\n\nAccumulationBounds represent an interval `[a, b]`, which is always closed\nat the ends. Here `a` and `b` can be any value f...",
      "category": "sympy",
      "icon": "\ud83e\uddee",
      "input_schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "SymPy expression for AccumBounds",
            "default": "x + 1"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Variables in the expression",
            "default": [
              "x"
            ]
          }
        },
        "required": [
          "expression"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AccumBounds operation"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata about the operation"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_calculus_accumbounds.py",
      "module_name": "sympy.calculus",
      "class_name": "AccumBounds"
    },
    "sympy-calculus-accumbounds-adjoint": {
      "id": "sympy-calculus-accumbounds-adjoint",
      "name": "SymPy AccumBounds.adjoint",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AccumBounds.adjoint"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_calculus_accumbounds_adjoint.py",
      "module_name": "sympy.calculus",
      "class_name": "AccumBounds",
      "method_name": "adjoint"
    },
    "sympy-calculus-accumbounds-apart": {
      "id": "sympy-calculus-accumbounds-apart",
      "name": "SymPy AccumBounds.apart",
      "description": "See the apart function in sympy.polys",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "x": {
            "type": "string",
            "description": "Parameter x for apart",
            "default": "None"
          },
          "args": {
            "type": "string",
            "description": "Parameter args for apart"
          }
        },
        "required": [
          "args"
        ]
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AccumBounds.apart"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_calculus_accumbounds_apart.py",
      "module_name": "sympy.calculus",
      "class_name": "AccumBounds",
      "method_name": "apart"
    },
    "sympy-calculus-accumbounds-args_cnc": {
      "id": "sympy-calculus-accumbounds-args_cnc",
      "name": "SymPy AccumBounds.args_cnc",
      "description": "Return [commutative factors, non-commutative factors] of self.\n\nExplanation\n===========\n\nself is treated as a Mul and the ordering of the factors is maintained.\nIf ``cset`` is True the commutative fac...",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "cset": {
            "type": "string",
            "description": "Parameter cset for args_cnc",
            "default": "False"
          },
          "warn": {
            "type": "string",
            "description": "Parameter warn for args_cnc",
            "default": "True"
          },
          "split_1": {
            "type": "string",
            "description": "Parameter split_1 for args_cnc",
            "default": "True"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AccumBounds.args_cnc"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_calculus_accumbounds_args_cnc.py",
      "module_name": "sympy.calculus",
      "class_name": "AccumBounds",
      "method_name": "args_cnc"
    },
    "sympy-calculus-accumbounds-as_base_exp": {
      "id": "sympy-calculus-accumbounds-as_base_exp",
      "name": "SymPy AccumBounds.as_base_exp",
      "description": "",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {},
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AccumBounds.as_base_exp"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_calculus_accumbounds_as_base_exp.py",
      "module_name": "sympy.calculus",
      "class_name": "AccumBounds",
      "method_name": "as_base_exp"
    },
    "sympy-calculus-accumbounds-as_coeff_Add": {
      "id": "sympy-calculus-accumbounds-as_coeff_Add",
      "name": "SymPy AccumBounds.as_coeff_Add",
      "description": "Efficiently extract the coefficient of a summation.",
      "category": "sympy",
      "icon": "\u2699\ufe0f",
      "input_schema": {
        "type": "object",
        "properties": {
          "rational": {
            "type": "string",
            "description": "Parameter rational for as_coeff_Add",
            "default": "False"
          }
        },
        "required": []
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Result from AccumBounds.as_coeff_Add"
          },
          "latex": {
            "type": "string",
            "description": "LaTeX representation of result"
          }
        }
      },
      "python_script": "widgets/sympy_sympy_calculus_accumbounds_as_coeff_Add.py",
      "module_name": "sympy.calculus",
      "class_name": "AccumBounds",
      "method_name": "as_coeff_Add"
    }
  }
}