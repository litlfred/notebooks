name: 🌿 Main Branch Preview Deployment

on:
  # Runs on pushes to main branch (for preview only)
  push:
    branches: [ main ]
  
  # Runs when PR is approved (for review deployments)
  pull_request_review:
    types: [submitted]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment per branch for main branch previews
concurrency:
  group: "main-preview"
  cancel-in-progress: true

env:
  # Repository configuration
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}
  
  # Deployment configuration - main branch goes to preview location
  DEPLOYMENT_TYPE: preview
  DEPLOYMENT_CONTEXT: preview

jobs:
  # Build job for main branch preview
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request_review' && github.event.review.state == 'approved'))
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Display deployment info
      run: |
        echo "🚀 Main Branch Preview Deployment"
        echo "================================="
        echo "📦 Repository: ${{ github.repository }}"
        echo "🌿 Branch: main (deploying to preview location)"
        echo "⚡ Trigger: ${{ github.event_name }}"
        echo "🔗 Preview URL: https://${{ env.REPO_OWNER }}.github.io/${{ env.REPO_NAME }}/branch-preview/main"
        echo "================================="
    
    - name: Post deployment start comment
      if: github.event.pull_request.number != null || github.event_name == 'pull_request_review'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.review?.pull_request?.number;
          if (!prNumber) {
            console.log('No PR number found, skipping comment');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 **Deployment Status**')
          );
          
          const body = `🚀 **Deployment Status**
          
          ⏳ **Deployment in progress...**
          
          📦 Repository: \`${{ github.repository }}\`
          🌿 Branch: \`${{ github.ref_name }}\`
          ⚡ Trigger: \`${{ github.event_name }}\`
          👤 Started by: @${{ github.actor }}
          🕐 Started at: ${new Date().toUTCString()}
          
          ---
          *This comment will be updated with deployment results.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
            core.setOutput('comment_id', botComment.id);
          } else {
            const { data: newComment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
            core.setOutput('comment_id', newComment.id);
          }
          core.setOutput('pr_number', prNumber);
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install numpy matplotlib
    
    - name: 🔧 Prepare main branch preview deployment
      run: |
        echo "🚀 Preparing main branch preview deployment"
        
        # Set environment variables for the deployment script
        export GITHUB_WORKSPACE="${{ github.workspace }}"
        export GITHUB_REF_NAME="main"
        export GITHUB_REPOSITORY="${{ github.repository }}"
        export GITHUB_REPOSITORY_OWNER="${{ env.REPO_OWNER }}"
        export DEPLOYMENT_TYPE="preview"
        export DEPLOYMENT_CONTEXT="preview"
        
        # Run the preview deployment script for main branch
        python scripts/deploy_preview_branch.py "main" "${{ github.workspace }}"
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Build with Jekyll
      uses: actions/jekyll-build-pages@v1
      with:
        source: ./_deploy
        destination: ./_site
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3

  # Deployment job for main branch preview
  deploy:
    environment:
      name: github-pages-main-preview
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branch-preview/main
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Update deployment status
      run: |
        echo "🚀 Main branch preview deployment completed successfully!"
        echo "🔗 Preview URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branch-preview/main"
        echo "📱 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "⏰ Deployed at: $(date)"
    
    - name: Update PR comment with success
      if: always() && (github.event.pull_request.number != null || github.event_name == 'pull_request_review') && needs.build.result == 'success' && steps.deployment.conclusion == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.review?.pull_request?.number;
          if (!prNumber) {
            console.log('No PR number found, skipping comment update');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 **Deployment Status**')
          );
          
          const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';
          
          const body = `🚀 **Main Branch Preview Deployment**
          
          ✅ **Deployment Successful!** 
          
          📦 Repository: \`${{ github.repository }}\`
          🌿 Branch: \`main\` (preview location)
          ⚡ Trigger: \`${{ github.event_name }}\`
          👤 Started by: @${{ github.actor }}
          🕐 Completed at: ${new Date().toUTCString()}
          
          ## 🎉 Preview your deployment:
          
          <div align="center">
          
          [![🌐 View Main Preview](https://img.shields.io/badge/🌐_View_Main_Preview-brightgreen?style=for-the-badge&logo=github-pages)](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branch-preview/main)
          
          </div>
          
          ---
          📱 **Preview URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branch-preview/main
          
          ⚠️ **Note**: This is a preview deployment. For production deployment, use the manual "Production Deployment" workflow.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }
    
    - name: Update PR comment with failure
      if: always() && (github.event.pull_request.number != null || github.event_name == 'pull_request_review') && (needs.build.result == 'failure' || steps.deployment.conclusion == 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.review?.pull_request?.number;
          if (!prNumber) {
            console.log('No PR number found, skipping comment update');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 **Deployment Status**')
          );
          
          const body = `🚀 **Deployment Status**
          
          ❌ **Deployment Failed**
          
          📦 Repository: \`${{ github.repository }}\`
          🌿 Branch: \`${{ github.ref_name }}\`
          ⚡ Trigger: \`${{ github.event_name }}\`
          👤 Started by: @${{ github.actor }}
          🕐 Failed at: ${new Date().toUTCString()}
          
          ## 🔍 Check the logs for details:
          
          <div align="center">
          
          [![📋 View Deployment Logs](https://img.shields.io/badge/📋_View_Deployment_Logs-red?style=for-the-badge&logo=github-actions)](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          </div>
          
          ---
          Please check the workflow logs above for error details and try again once issues are resolved.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }