name: 🚀 Deploy Mathematical Notebooks to GitHub Pages

on:
  # Runs on pushes to main branch (creates preview at /branch-preview/main)
  push:
    branches: [ main ]
  
  # Manual production deployment (deploys to root URL)
  workflow_dispatch:
    inputs:
      deploy_type:
        description: '🎯 Deployment type'
        required: true
        default: 'preview'
        type: choice
        options:
        - preview
        - production
      
  # Runs when PR to main is approved (creates main branch preview)
  pull_request_review:
    types: [submitted]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

# Allow only one concurrent deployment per type
concurrency:
  group: "pages-${{ github.event.inputs.deploy_type || 'preview' }}"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.ref == 'refs/heads/main' && (github.event_name == 'push' || 
      (github.event_name == 'pull_request_review' && github.event.review.state == 'approved')))
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Display deployment info
      run: |
        echo "🚀 Main Branch Deployment Information"
        echo "===================================="
        echo "📦 Repository: ${{ github.repository }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "⚡ Trigger: ${{ github.event_name }}"
        echo "🎯 Deploy Type: ${{ github.event.inputs.deploy_type || 'preview' }}"
        if [ "${{ github.event.inputs.deploy_type }}" = "production" ]; then
          echo "📱 Production URL: https://litlfred.github.io/notebooks"
        else
          echo "📱 Preview URL: https://litlfred.github.io/notebooks/branch-preview/main"
        fi
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "👤 Triggered by: ${{ github.actor }}"
        fi
        echo "===================================="
    
    - name: Post deployment start comment
      if: github.event.pull_request.number != null || github.event_name == 'pull_request_review'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.review?.pull_request?.number;
          if (!prNumber) {
            console.log('No PR number found, skipping comment');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 **Deployment Status**')
          );
          
          const body = `🚀 **Deployment Status**
          
          ⏳ **Deployment in progress...**
          
          📦 Repository: \`${{ github.repository }}\`
          🌿 Branch: \`${{ github.ref_name }}\`
          ⚡ Trigger: \`${{ github.event_name }}\`
          👤 Started by: @${{ github.actor }}
          🕐 Started at: ${new Date().toUTCString()}
          
          ---
          *This comment will be updated with deployment results.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
            core.setOutput('comment_id', botComment.id);
          } else {
            const { data: newComment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
            core.setOutput('comment_id', newComment.id);
          }
          core.setOutput('pr_number', prNumber);
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Configure deployment context
      run: |
        echo "🔧 Configuring deployment context..."
        # Set deployment type for the Python script
        if [ "${{ github.event.inputs.deploy_type }}" = "production" ]; then
          export INPUT_DEPLOY_TYPE=production
          echo "🎯 Configuring for PRODUCTION deployment"
        else
          export INPUT_DEPLOY_TYPE=preview
          echo "🌿 Configuring for PREVIEW deployment (main branch)"
        fi
        
        python scripts/deploy_manager.py . configure
        
        # Show what was configured
        echo "📝 Jekyll configuration:"
        cat docs/_config.yml | grep -E "(baseurl|url|deployment_type|branch_name|schema_base_url)"
    
    - name: Install dependencies
      run: |
        pip install numpy matplotlib
    
    - name: Test core mathematical functions
      run: |
        cd src
        python -c "
        import weierstrass_playground.core as wc
        import numpy as np
        print('Testing mathematical functions...')
        z = 2.0 + 1.5j
        p, q, N = 11.0, 5.0, 2
        wp_val = wc.wp_rect(z, p, q, N)
        print(f'℘({z}) = {wp_val}')
        print(f'|℘({z})| = {abs(wp_val):.4f}')
        assert np.isfinite(wp_val), 'Function returned non-finite value'
        print('✓ Mathematical functions working correctly')
        "
    
    - name: Validate markdown and JavaScript
      run: |
        # Basic validation that files exist and have expected content
        test -f docs/index.md
        test -f docs/weierstrass-playground.md
        test -f docs/_layouts/default.html
        test -f docs/weierstrass-playground/weierstrass-app.js
        test -f docs/weierstrass-playground/style.css
        test -d docs/weierstrass-playground/python/weierstrass_playground
        test -f docs/weierstrass-playground/python/weierstrass_playground/__init__.py
        
        # Check that markdown contains expected elements
        grep -q "Weierstrass ℘ Playground" docs/weierstrass-playground.md
        grep -q "Pyodide" docs/weierstrass-playground/weierstrass-app.js
        
        echo "✓ Static files validated"
    
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Build with Jekyll
      uses: actions/jekyll-build-pages@v1
      with:
        source: ./docs
        destination: ./_site
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Update deployment status
      run: |
        echo "🚀 Deployment completed successfully!"
        echo "📱 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "⏰ Deployed at: $(date)"
    
    - name: Update PR comment with success
      if: always() && (github.event.pull_request.number != null || github.event_name == 'pull_request_review') && needs.build.result == 'success' && steps.deployment.conclusion == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.review?.pull_request?.number;
          if (!prNumber) {
            console.log('No PR number found, skipping comment update');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 **Deployment Status**')
          );
          
          const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';
          
          const body = `🚀 **Deployment Status**
          
          ✅ **Deployment Successful!** 
          
          📦 Repository: \`${{ github.repository }}\`
          🌿 Branch: \`${{ github.ref_name }}\`
          ⚡ Trigger: \`${{ github.event_name }}\`
          🎯 Deploy Type: \`${{ github.event.inputs.deploy_type || 'preview' }}\`
          👤 Started by: @${{ github.actor }}
          🕐 Completed at: ${new Date().toUTCString()}
          
          ## 🎉 View your deployment:
          
          <div align="center">
          
          [![🌐 View Live Site](https://img.shields.io/badge/🌐_View_Live_Site-brightgreen?style=for-the-badge&logo=github-pages)](${deploymentUrl})
          
          </div>
          
          ---
          📱 **Direct URL**: ${deploymentUrl}
          
          ${ '${{ github.event.inputs.deploy_type }}' === 'production' ? 
            '🎯 **This is a PRODUCTION deployment** - Live at the main site URL!' : 
            '🌿 **This is a PREVIEW deployment** - Main branch preview for testing before production.' 
          }`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }
    
    - name: Update PR comment with failure
      if: always() && (github.event.pull_request.number != null || github.event_name == 'pull_request_review') && (needs.build.result == 'failure' || steps.deployment.conclusion == 'failure')
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request?.number || context.payload.review?.pull_request?.number;
          if (!prNumber) {
            console.log('No PR number found, skipping comment update');
            return;
          }
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🚀 **Deployment Status**')
          );
          
          const body = `🚀 **Deployment Status**
          
          ❌ **Deployment Failed**
          
          📦 Repository: \`${{ github.repository }}\`
          🌿 Branch: \`${{ github.ref_name }}\`
          ⚡ Trigger: \`${{ github.event_name }}\`
          👤 Started by: @${{ github.actor }}
          🕐 Failed at: ${new Date().toUTCString()}
          
          ## 🔍 Check the logs for details:
          
          <div align="center">
          
          [![📋 View Deployment Logs](https://img.shields.io/badge/📋_View_Deployment_Logs-red?style=for-the-badge&logo=github-actions)](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          </div>
          
          ---
          Please check the workflow logs above for error details and try again once issues are resolved.`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: body
            });
          }